start_at = "wee_clink"
start_theme = my_theme

game_information {
   game_name                    = Chez Dark Shade Ark
   game_version                 = 1.0.0
   game_shortname               = cdsa
   written_by                   = Andrew Schultz
   uuid                         = 9a53454f-9f3c-4af9-b93a-4a04c86c6c96
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of {wp} and {ut}
}


## Defines locations in the world

strings {
   # general strings
   a_num : string "<an umber, uhh, number<#f80>>" ;
   cdsa : string "<Chez Dark Shade Arc<#f80>>" ;
   gsgr : string "<Go-Strange-Ghost Range<#f80>>" ;
   ut : string "<Us Too<#f80>>[http://andrewschultz.itch.io/us-too]" ;
   wp : string "<Why Pout<#f80>>[http://andrewschultz.itch.io/us-too]" ;
   note_once : string "<ONE-TIME NOTE:<#f0f>> " ;

   my_score : string "{score}/{max_score}" ;

   # commands
   v_about : string "<ABOUT<#0f0>>" ;
   v_credits : string "<CREDITS<#0f0>>" ;
   v_history : string "<HISTORY<#0f0>>" ;
   v_i : string "<I<#0f0>>" ;
   v_score : string "<SCORE<#0f0>>" ;
   v_verbs : string "<VERBS<#0f0>>" ;
   xme : string "<X ME<#0f0>>" ;
   xnum : string "<X NUMBER<#0f0>>" ;

   # location stuff
   r00_header : dynamic_string {( point_sly_maps ? "<Slime Apps<#f80>>" : "<A Cramp-Ache Ramp<#f80>>" )} ;
   r00_loc_desc : dynamic_string {( return_sly_maps ? "A ramp leads up east. Back north, the wall." :
      point_sly_maps ? "The slime is slowly oozing away. Come back in a bit to see what's there." :
      "Slime apps leave ooze blocking passage every way but back north." )} ;
   r00_no_go : dynamic_string {( "You can only go north" + (return_sly_maps ? " or east." : ".") )} ;

   r01_loc_desc : dynamic_string {( "A wall, crowned. You don't want to go back into the wee clink, so you probably want to " + (point_walk_round ? "Go north, east, south or down, where you found exits in the wall." : "find exits in the wall somehow.") )} ;
   r01_nogo : dynamic_string {( point_walk_round ? "You can't go that way, but there are exits north, south, east and down." : "The wall, crowned is blocking you. You need to find a way through. There must be at least one, if you look enough." + " {wc_noback}" )} ;
   r01_noback : string "You don't want to go back <IN<#f80>> to the wee clink." ;

   r02_header : dynamic_string {( return_off_lame ? "<Gulf, Lying<#f80>>" : "<Awe Flame<#f80>>" )} ;
   r02_loc_desc : dynamic_string {( return_off_lame ? "You're in a gulf, lying. Like you can't really go anywhere." : "An awe-flame distracts you from everything." )} ;
   r02_nogo : dynamic_string {( return_off_lame ? "You see no passage." : point_off_lame ? "You should come back and look for new exits once the land's healed from the flame." : "The awe-flame distracts you too much from finding new exits." )} ;

   r10_header : dynamic_string {( point_great_ankhs ? "<Great Ankhs<#f80>>" : "<Gray Tanks<#888>>" )} ;
   r10_loc_desc : dynamic_string {( "This place is covered with " + ( point_great_ankhs ? "great ankhs" : "grey tanks" ) + ". It's too desolate everywhere except back west." )} ;
   r10_no_go : string "You can only go back west." ;

   r11_header : dynamic_string {( "<Pond, Icy<#f80>>" )} ;
   r11_loc_desc : dynamic_string {( "Back west is the wall. There's also a forbidding passage down past the pond." )} ;
   r11_no_go : string {( "You can only go back west or down." )} ;

   r12_header : dynamic_string {( point_arbor_dens ? "<Arbor Dens<#f80>>" : "<Our Burdens<#f80>>" )} ;
   r12_loc_desc : dynamic_string {( "The only way back is west." )} ;
   r12_no_go : string {( "You can only go back west." )} ;

   r20_header : dynamic_string {( "\"Do Dark, Dude\" Ark" )} ;
   r20_loc_desc : dynamic_string {( "Hoo boy it's dark in here. You can only go back up." )} ;
   r20_no_go : string {( "You can only go back up." )} ;

   r21_header : dynamic_string {( point_deem_unfit ? "<Tomb Eek-Too-Meek<#f80>>" : "<Tomb End-To-Mend<#f80>>" )} ;
   r21_loc_desc : dynamic_string {( "This is where the maze ends. You can only go back north." )} ;
   r21_no_go : string {( "You can only go back north or east." )} ;

   r22_header : dynamic_string {( "<Maze Which May Switch<#f80>>" )} ;
   r22_loc_desc : dynamic_string {( "There's a maze to the south, though you can go back up, too." )} ;
   r22_no_go : string {( "You can only go back north or east." )} ;

   custom_unknown_verb_error : dynamic_string {( "Nothing special happens. You can use {v_verbs} for a general overview of standard verbs." )} ;
   exits_err : dynamic_string {(
      is_at "wee_clink" ? "You need to figure a puzzle to leave, and when you do, you'll automatically go out." :
      is_at "r00" ? "{r00_nogo}" :
      is_at "r01" ? "{r01_nogo}" :
      is_at "r02" ? "{r02_nogo}" :
      is_at "r10" ? "{r10_nogo}" :
      is_at "r11" ? "{r11_nogo}" :
      is_at "r12" ? "{r12_nogo}" :
      is_at "r20" ? "{r20_nogo}" :
      is_at "r21" ? "{r21_nogo}" :
      is_at "r22" ? "{r22_nogo}" :
      "You can't go that way. I should have a non-default message." )} ;
   nospecial_custom : string "You see no specific item like that. For rooms, <LOOK<#0f0>>. Note that this game may not note adjectives as synonyms, so use nouns." ;
}

integers {
   score : integer "0" ;
   max_score : integer "13" ;
}

booleans {
   # points and quasi-points
   point_weak_link : boolean "false" ;
   point_walk_round : boolean "false" ;
   point_off_lame : boolean "false" ;
   return_off_lame : boolean "false" ;
   point_sly_maps : boolean "false" ;
   return_sly_maps : boolean "false" ;
   point_a_dart : boolean "false" ;
   point_pawn_dicey : boolean "false" ;
   point_gull_flying : boolean "false" ;
   point_arbor_dens : boolean "false" ;
   point_first_attic : boolean "false" ;
   point_great_ankhs : boolean "false" ;
   point_deem_unfit : boolean "false" ;
   point_the_floored : boolean "false" ;
   point_hi_strawberry : boolean "false" ;

   progress_x_sly : boolean "false" ;
   progress_x_key : boolean "true" ;
   progress_full_map : boolean "false" ;
   progress_got_dart : boolean "true" ;

   # map rendering booleans
   showing_map : boolean "true" ;

   # flags for one time notes, etc.
   warn_generic_credit : boolean "false" ;
   warn_hints : boolean "false" ;
   warn_score_header : boolean "false" ;

   intro_shown_yet : boolean "false" ;
   ever_x_me : boolean "false" ;
   ever_x_number : boolean "false" ;
}

vocabulary {
   : verb / aliases = [gt, goto]
   : verb / aliases = [in, enter]
   : verb / aliases = [out, exit]
}

locations {
   wee_clink      : location "It sure is claustrophobic in here. You're not sure how to get out." header="<Wee Clink<#ff0>>" graphic="r_wee_clink" {
      on_command {
         : match "weak link" {
            : print "There you go." ;
            : set_true "point_weak_link" ;
            : gosub "add_point" ;
            : press_any_key ;
            : goto "r01" ;
            : redescribe ;
         }
         : match "weak _;_ link" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }
   r00 : location "{r00_loc_desc}" header = "{r00_header}" graphic="r_blank" {
      on_command {
         : match "sly maps" {
            : print "Narrative text." ;
            : set_true "point_sly_maps" ;
            : gosub "add_point" ;
            : pocket "sly_maps" ;
            : done ;
         }
         : if (!point_sly_maps) {
            : match "sly _;_ maps" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r01 : location "{r01_loc_desc}" header = "<Wall, Crowned<#ff0>>" graphic="r_wall_crowned" {
         on_command {
         : match "walk round" {
            : print "Narrative text." ;
            : set_true "point_walk_round" ;
            : gosub "add_point" ;
            : press_any_key ;
            : done ;
         }
         : match "walk _;_ round" {
            : gosub "say_half" ;
            : done ;
         }
      }
      on_describe {
         : if (point_off_lame && !return_off_lame) {
            : set_true "return_off_lame" ;
         }
         : if (point_sly_maps && !return_sly_maps) {
            : set_true "return_sly_maps" ;
         }
      }
   }
   r02 : location "{r02_loc_desc}" header = "{r02_header}" graphic="r_blank" {
      on_command {
         : match "off lame" {
            : print "Narrative text." ;
            : set_true "point_off_lame" ;
            : gosub "add_point" ;
            : pocket "key_nigh" ;
            : done ;
         }
         : if (!point_off_lame) {
            : match "off _;_ lame" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (return_off_lame) {
            : match "gull flying" {
               : if (point_gull_flying) {
                  : print "Already done!" ;
                  : done ;
               }
               : print "Narrative text." ;
               : set_true "point_gull_flying" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_gull_flying) {
               : match "gull _;_ flying" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r10 : location "{r10_loc_desc}" header = "{r10_header}" graphic="r_blank" {
      on_command {
         : match "great ankhs" {
            : if (point_great_ankhs) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_great_ankhs" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_great_ankhs) {
            : match "great _;_ ankhs" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r11 : location "You can go back west here, or a forbidding passage leads down." header = "<Pond, Icy<#f80>>" graphic="r_blank" {
      on_command {
         : match "pawn dicey" {
            : if (point_pawn_dicey) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_pawn_dicey" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_pawn_dicey) {
            : match "pawn _;_ dicey" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r12 : location "It's bare and desolate here/There are a bit more trees now, but one particularly stands out/You've made things real verdant here. Can't be much left." header = "<r12<#ff0>>" graphic="r_blank" {
      on_command {
         : match "arbor dens" {
            : if (point_arbor_dens) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_arbor_dens" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_arbor_dens) {
            : match "arbor _;_ dens" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_arbor_dens) {
            : match "first attic" {
               : if (point_first_attic) {
                  : print "You already discovered the first attic!" ;
               }
               : print "You wonder what a fir (static) could hide. But you look around. You stare at it. Slowly it starts to sway, fist one direction, then another. Off in one very cold attic is a free-speech-freeze peach." ;
               : pocket "freeze_peach" ;
               : set_true "point_first_attic" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_first_attic) {
               : match "first _;_ attic" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r20 : location "r20 desc" header = "<r20<#ff0>>" graphic="r_blank" {
      on_command {
         : match "the floored;thee floored" {
            : if (!point_deem_unfit) {
               : print "The thief lord isn't distracted by you." ;
               : done ;
            }
            : if (point_the_floored) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_the_floored" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_the_floored) {
            : match "the _;thee _;_ floored" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r21 : location "r21 desc" header = "<r21<#ff0>>" graphic="r_blank" {
      on_command {
         : match "deem unfit" {
            : if (point_deem_unfit) {
               : print "You already got rid of the demon!" ;
            }
            : if (!point_first_attic) {
               : print "You thought you had some good points, but the demon (fit) roars back at you with a variety of rhetorical debating techniques, before suggesting you're lucky they didn't use violence. If only you had some way to trip them up." ;
               : done ;
            }
            : print "You start to deem the demon unfit, which starts a big reductive argument with them over how that's too easy and obvious and silly. You mention that they were the ones calling themselves fit, and if they didn't see this, or prep to defend themselves against accusations, they deserve ... uh, you're not sure. But the demon seems flustered by this, not really used to arguments where they're challenged. They're a demon, cool. \"Not someone to deem uncool, right?\" you say." ;
            : print "That does it! They stomp off. They wonder why they were guarding this place anyway. There's no loot left. No adventurers that are fun to beat up." ;
            : print "You look around to see if any treasure is left. You don't want to go peeking in tombs, and the only thing you find is a po' charm-poach arm, which doesn't seem to have gotten a lot of use. You take it." ;
            : pocket "poach_arm" ;
            : set_true "point_deem_unfit" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_deem_unfit) {
            : match "deem _;_ unfit" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r22 : location "r22 desc" header = "<r22<#ff0>>" graphic="r_blank" {
      on_command {
         : match "s _" {
            : if (!progress_full_map) {
               : print "You have no way through the maze." ;
               : done ;
            }
            : if (!progress_got_dart) {
               : print "You use the map and the key to work your way through the maze. Well, near the end. But something supernatural and scary lies near the end. You have to flee. However, in the process, you find some {i_aid_art} in the maze." ;
               : pocket "aid_art" ;
               : set_true "progress_got_dart" ;
               : done ;
            }
            : if (!point_great_ankhs) {
               : print "You get to the end of the maze, but some great evil blows you back. You have no protective item." ;
               : done ;
            }
            : if (!has_visited "r21") {
               : mask {
                  : print "Ah, yes, that's the way through." ;
               }
            }
         }
      }
   }
}

# Defines things in the world (scenery cannot be carried)

objects {
   key_nigh : object "keen (aye!) key nigh" msg="You revisit the key to see one-half of a maze." ;
   sly_maps : object "sly maps" msg="One-half of a maze." ;
   aid_art : object "{i_aid_art}" msg="It's about as helpful as art can be. Maybe you can make it into something more useful." ;
   dart : object "a dart" msg="It's the dart you got from the aid art." ;
   freeze_peach : object "a free-speech-freeze peach" msg="You'd think it would exhibit a chilling effect on you, but you feel a bit freer to speak your own mind or realize you have a right to cut in around people who talk too much." ;
   poach_arm : object "a po'-charm-poach arm" msg="It doesn't seem to be after big treasure. It seems like it could be a real nuisance, though." ;
}

connections {

   ## Connects locations together (bidirectional)

   from, direction, to = [
      r01, enter, wee_clink
      r01, north, r02
      r01, south, r00
      r01, down, r22
      r01, east, r11
      r02, east, r12
      r00, east, r10
      r22, south, r21
      r11, down, r20
   ]

}

barriers {
   block_from_clink : block {
      location = r01
      block_when_not = point_weak_link
      message = You haven't found a way out yet.
   }
   block_to_clink : block {
      location = wee_clink
      block_when = point_weak_link
      message = You have no desire or need to go back to the wee clink.
   }
   block_r01_n : block {
      location = r02
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r01_s : block {
      location = r00
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r01_d : block {
      location = r22
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r01_e : block {
      location = r11
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r02_e : block {
      location = r12
      block_when_not = point_gull_flying
      message = {r02_nogo}
   }
   block_r00_e : block {
      location = r12
      block_when_not = return_sly_maps
      message = {r00_nogo}
   }
}

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {cdsa}?
   ask_quit                                       = Do you wish to quit {cdsa}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {cdsa}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
   you_see_nothing_special = {nospecial_custom}
   you_see_nothing_special_2 = {nospecial_custom}
      }
   }
}

## Print the objective when the game starts

on_startup {
   : print "{cdsa}: EctoComp 2025 Petite Mort game" ;
   : press_any_key ;
   : clear_screen;
}

## Execute this every time a player moves or redescribes a location

on_describe {
   : if (!intro_shown_yet) {
      : print "{note_once}{cdsa} uses a reduced parser. {v_verbs} details them, though standard starting commands like {v_about} and {xme} may help you get started." ;
      : set_true "intro_shown_yet" ;
   }
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : if (is_carried "aid_art") {
      : match "a dart" {
         : if (point_a_dart) {
            : print "Already done!" ;
            : done ;
         }
         : destroy "aid_art" ;
         : pocket "dart" ;
         : print "Narrative text." ;
         : set_true "point_a_dart" ;
         : gosub "add_point" ;
         : done ;
      }
      : if (!point_a_dart) {
         : match "a _;_ dart" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }
   : if (is_carried "key_nigh" && is_carried "sly_maps") {
      : match "x key; x map;x maps;x sly;x nigh" {
         : print "You notice the key and the map come together to form a full maze. This could be useful later!" ;
         : set_false "showing_map" ;
         : update_graphic "s_maze_full" ;
         : set_true "showing_map" ;
         : done ;
      }
   }
   : if (is_carried "key_nigh") {
      : match "x key;x nigh" {
         : print "You see the bottom half of a maze." ;
         : set_false "showing_map" ;
         : update_graphic "s_maze_s" ;
         : set_true "showing_map" ;
         : done ;
      }
   }
   : if (is_carried "sly_maps") {
      : match "x map;x maps;x sly" {
         : print "You see the top half of a maze." ;
         : set_false "showing_map" ;
         : update_graphic "s_maze_n" ;
         : set_true "showing_map" ;
         : done ;
      }
   }
   : if (point_the_floored) {
      : match "hi strawberry;high strawberry" {
         : if (point_hi_strawberry) {
            : print "Already done!" ;
            : done ;
         }
         : if (!is_at "r01") {
            : print "You look around to find someone or something to notify of the heist robbery, but they're not here." ;
            : done ;
         }
         : print "Narrative text." ;
         : set_true "point_hi_strawberry" ;
         : gosub "add_point" ;
         : win_game ;
         : done ;
      }
      : if (!point_hi_strawberry) {
         : match "hi _;high _;_ strawberry" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }

   : match "about _" {
      : print "{cdsa} is a simplified-parser game that requires two-word commands to solve puzzles. Some puzzles rely on others. A few have alternate spellings. It should always say if you are half-right." ;
      : print "" ;
      : print "{cdsa} is a ten-room game. The main area is 3x3. Originally I wanted to make it symmetrical, but unfortunately the clearest way to do so would draw a hate symbol. You know which one. So if you want to map {cdsa} on your own, the left 2x3 are ground level, and the first room is center west." ;
      : print "" ;
      : print "For thanks, {v_credits}." ;
      : print "For a more detailed history, {v_history}." ;
      : print "For verbs to use, {v_verbs}." ;
   }
   : match "credits _;credit _" {
      : print "Thanks to the organizers of EctoComp past and present." ;
      : print "Thanks to Chris Ainsley for creating Adventuron." ;
      : print "Thanks to <mazegenerator.net<#0f0>>[http://www.mazegenerator.net] for generating the maze seen in some graphics." ;
      : print "Blanket thanks to Python and its developers for scripts that helped me generate similar code (point scoring, etc.) quickly." ;
      : if (!warn_generic_credit) {
         : print "{note_once}you can see generic Adventuron credits with <*CREDITS<#f80>>." ;
         : set_true "warn_generic_credit" ;
      }
   }
   : match "help _;hint _;hints _" {
      : if (!warn_hints) {
         : print "{note_once}there are no explicit in-game hints beyond the first point. {cdsa} comes with a walkthrough if you want spoilers. Also, there is a hint item you can find/have found with X ME." ;
         : set_true "warn_hints" ;
         : done ;
      }
      : print "" ;
      : print "You can {xme} for a hint device which is meant to be relatively intuitive." ;
      : print "{xnum} should give you a number. You may be able to guess what it means, but if not, I will give progressive hints." ;
      : print "If {xnum}'s number is 0 or -1, you are done here." ;
      : print "Most of the time, {xnum} gives a two-digit number. If it's blurry, that means nothing to do here yet. But you can still try to guess for future reference. If it's particularly" ;
      : print "If the number is not blurry, {xnum} will not spoil any letters. However ..." ;
      : print "{xnum} will give, in order, the number of letters in each word (tens digit = first, ones = second.)" ;
   }
   : match "history _" {
      : print "{cdsa} came about after {gsgr}, when I just said, what would happen if I had an EctoComp entry with the leftovers from brainstorming {ut} and {wp}? Obviously some ideas were more amusingly spooky than others, and some words suggested themselves." ;
      : print "" ;
      : print "So {gsgr} formed, and I focused on features. During the stretch run for {ut} in late August, I had a flurry of ideas while procrastinating bug fixes and transcript reading. One of the transcripts was to blame, so to speak: two testers noticed an unintentional red herring in the Cell, Urban ... which might have been a better puzzle than the cell itself, though the cell had a better \"after\" room name. So that was my starting puzzle. Then soon after I saw something indicating the final puzzle. I had to go through with it!" ;
      : print "" ;
      : print "{cdsa} has more rooms than {gsgr} so it doesn't have bells and whistles, but I may add them post-comp. No way was I fitting everything in under four hours." ;
      : print "" ;
      : print "So, late August 2025, then the second half of September 2025." ;
   }
   : match "score _" {
      : print "You've currently scored {score} of {max_score} total points. There are no bonus points." ;
      : if (!warn_score_header) {
         : print "{note_once}This is tracked in the upper left." ;
         : set_true "warn_score_header" ;
      }
   }
   : match "verbs _;verb _" {
      : print "{cdsa} uses the four compass directions, along with <UP<#0f0>> and <DOWN<#0f0>> and <IN<#0f0>> and <OUT<#0f0>>. You need to <X<#0f0>>/<EXAMINE<#0f0>> some items you find. They're in your <INVENTORY<#0f0>>, which you can see with <I<#0f0>>. There is no need for <TAKE<#0f0>> or <DROP<#0f0>>, but {v_i} and {v_score} chart your inventory and progress." ;
      : print "Meta-verbs include {v_about}, {v_credits}, and {v_verbs}." ;
      : print "All point-scoring commands have two words which you need to figure." ;
      : print "TSTART/TSTOP start and stop a transcript." ;
   }
   : match "x me;x myself" {
      : if (!ever_x_me) {
         : print "Weird! You see {a_num} on your arm." ;
         : set_true "ever_x_me" ;
         : done ;
      }
      : print "There's {a_num} on your arm, which may or may not help you." ;
   }
   : match "x number;x umber" {
      : set_true "ever_x_me" ;
      : if (!ever_x_number) {
         : print "You don't remember getting a tattoo. But it's weird ... it swirls around a bit." ;
         : set_true "ever_x_number" ;
      } : else {
         : print "You watch the number swirl around a bit more." ;
      }
   }
}

on_tick {
}

on_render {
   : if (showing_map) {
      : if (is_at "r01" && point_walk_round) {
         : overlay "o_wall_crowned" x="0" y="16" ;
      }
   }
}

assets {
   graphics {
   # overlays
      o_wall_crowned : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAYAQMAAAAvTrFnAAAABlBMVEX///+AgIBizNOVAAAAAXRSTlMAQObYZgAAACtJREFUKFNjYBgigP0BfppB/gd+msH+D36asIL6f/hpKij4/x8/PaqAPgoAytGDTRmnj0oAAAAASUVORK5CYII=" ;

   # rooms
      r_wall_crowned : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAAACAgAD/AAD//wAAAP8SxTJ0AAAAr0lEQVR4XsyTsQ3AMAgEs8IJFkFMgJT9Z0qRBkP9Slz+PdLJNtd9HhiBmk+B8hFI+Rbw8joTKd8CeHEmAv61wJ+foPyG8U+EfAsAFkDPdHwLFJAJdEUd3wLYW4iuKORbIAMLLHtBy/cNWAxDBf+tQEVmWKZ5C7V8ryGMNVHzazTWvJo/7dSxCQBADMSw8KN4/yF/jGt0kF6k8M3Xq+UB3Hy1/QGADgDoAIAOAOgAwAc4WsdzbGzXvgAAAABJRU5ErkJggg==" ;

      r_wee_clink : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAgIDAwMAAXXgPAAAAyElEQVR4Xu3WMQoDIRAF0MFqSZ9+mdKjpAzJfSQQGDxF1krmlCk0/MYt/Cm2SKZywX18/IXKfTTR3R/+mf5Rh1v3gRoB1DgNIEJbMgAi1EgBnqRP8Eng1oJn71Pa4nwQUEW+BMyOSPBPcB0neJKACA/0YQGzrGpWVGngpMFSWWkg5VVtKYEGlhw02Uv1qDPgW7iME2yTAFogAbRAAmiBBvgzGLew/VILcdxCnQPQAg2gBRLA9U4CeGAQAH5rFAMUAJkCMoCyD7wBMsQsMHU9JoUAAAAASUVORK5CYII=" ;

      r_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAYAQMAAAAvTrFnAAAAA1BMVEX//wCKxvRFAAAAD0lEQVR4XmPAAKNgFIwCAAMYAAFrMpCEAAAAAElFTkSuQmCC" ;

   # scenery/individual items
      s_maze_full : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAABRAQMAAAAHGerDAAAABlBMVEUAAAD///+l2Z/dAAABD0lEQVR4XsXWMY7EIAwF0L9KkZIb5CQz90KiyOReg5iTQG7gdC5G5K/IFrNaCbqVXaSIXvGNIxzwUwDg0Gr9vPwNVjIJi1LsgF80ypSPrx4Ip0YJJ2kIptf8dB7ohlyLxqtXQ+CX475fSbttMpGFSeyAX+YHpjw4SWoiM8n/BHEIAI07cMD1M9SfIHbAL4DzGI67tkcSO+Bx3PeQdetmoFZ5Z6UhmPJ8XUG37rgzo4SilXYgZNxcyLjvXcAkIWulJdCtgYfrg8i1KMUQvPQJAN1xh6KR71MrDUH7JttxDse9FlaxBMfNARjsbrY2WWkH2hWJazcOF+upVezA9NJNsMzbYC1S3mSiHUAr/+d/8hvvtjQLfUIXKgAAAABJRU5ErkJggg==" ;
      s_maze_n : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAApAQMAAADgaGVvAAAABlBMVEUAAAD///+l2Z/dAAAAqElEQVR4XsXUMQ7DIAwF0F8xZOQGnKS9l6UMae9V1J4EcgPYPFSJa9EhWWCr7NF6MjZGQI6AhocGliN5Bpp+FcksxQ5Q4FhcqpcemHcF8y5iCNx7enoCuk0umWOb1RBQqLe1ddodU14iWSvYAQrTHS4NblJYKySl/wRxCACOK1Dh+xW23zl2gALgCcN1b20hxQ4Q9E3OiR/dCsJb+SQWQ+DS1L6gqz+BL3qUpiQWbdjqAAAAAElFTkSuQmCC" ;
      s_maze_s : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAApAQMAAADgaGVvAAAABlBMVEUAAAD///+l2Z/dAAAApElEQVR4XsXTsQ2EMAwFUJ8oKNmASbi9kFLk2IsIJkluA9O5QM4/XEGTa+3CRfRkKfkx4a4u94m7fExDvA+fIGYkDkUUfiBkmoarvb9NgI1DFoUnkMXAZ2iDhFgE7Ah2WemqZtyhSMJZReEI7E/ac/6NOxYoOwLbGSJ6NUGFXRMKPzBTv9I8Hs3FiZZFrKLsB7pdFqaxX5oTIOAT2OAHyGq29gA/7gin8wjDu+EAAAAASUVORK5CYII=" ;
   }
}
