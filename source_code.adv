start_at = "wee_clink"
start_theme = my_theme

game_information {
   game_name                    = Chez Dark Shade Ark
   game_version                 = 1.0.0
   game_shortname               = CSDA
   written_by                   = Andrew Schultz
   uuid                         = 9a53454f-9f3c-4af9-b93a-4a04c86c6c96
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of Why Pout and Us Too
}


## Defines locations in the world

strings {
   csda : string "<Chez Dark Shade Arc<#f80>>" ;

   wc_noback : string "You don't want to go back <IN<#f80>> to the wee clink." ;
   wc_nogo : dynamic_string {( point_walk_round ? "You can't go that way, but there are exits north, south, east and down." : "The wall, crowned is blocking you. You need to find a way through. There must be at least one, if you look enough." + " {wc_noback}" )} ;

   my_score : string "{score}/{max_score}" ;

   d_wall_crowned : dynamic_string {( "A wall, crowned. You don't want to go back into the wee clink, so you probably want to " + (point_walk_round ? "Go north, east, south or down, where you found exits in the wall." : "find exits in the wall somehow.") )} ;

   custom_unknown_verb_error : dynamic_string {( "That isn't a verb you need to win." )} ;
   exits_err : dynamic_string {(
      is_at "wee_clink" ? "You need to figure a puzzle to leave, and when you do, you'll automatically go out." :
      is_at "wall_crowned" ? "{wc_nogo}" :
      "You can't go that way. I should give more information."
   )} ;
}

integers {
   score : integer "0" ;
   max_score : integer "17" ;
}

booleans {
   point_weak_link : boolean "false" ;
   point_walk_round : boolean "false" ;
   showing_map : boolean "true" ;
}

locations {
   wee_clink      : location "It sure is claustrophobic in here. You're not sure how to get out." header="<Wee Clink<#ff0>>" graphic="r_wee_clink" {
      on_command {
         : match "weak link" {
            : print "There you go." ;
            : set_true "point_weak_link" ;
            : gosub "add_point" ;
            : press_any_key ;
            : goto "wall_crowned" ;
            : redescribe ;
         }
         : match "weak _;_ link" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }
   wall_crowned : location "{d_wall_crowned}" header = "<Wall, Crowned<#ff0>>" graphic="r_wall_crowned" {
         on_command {
         : match "walk round" {
            : print "Narrative text." ;
            : set_true "point_walk_round" ;
            : gosub "add_point" ;
            : press_any_key ;
            : done ;
         }
         : match "walk _;_ round" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }
   r1 : location "r1 desc" header = "<R1<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r2 : location "r2 desc" header = "<R2<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r3 : location "r3 desc" header = "<R3<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r4 : location "r4 desc" header = "<R4<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r5 : location "r5 desc" header = "<R5<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r6 : location "r6 desc" header = "<R6<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r7 : location "r7 desc" header = "<R7<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r8 : location "r8 desc" header = "<R8<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
}

# Defines things in the world (scenery cannot be carried)

objects {
}
   
connections {

   ## Connects locations together (bidirectional)

   from, direction, to = [
      wall_crowned, enter, wee_clink
      wall_crowned, north, r1
      wall_crowned, south, r2
      wall_crowned, down, r3
      wall_crowned, east, r4
      r1, east, r5
      r2, east, r6
      r3, south, r7
      r4, down, r8
   ]

}

barriers {
   block_from_clink : block {
      location = wall_crowned
      block_when_not = point_weak_link
      message = You haven't found a way out yet.
   }
   block_to_clink : block {
      location = wee_clink
      block_when = point_weak_link
      message = You have no desire to go back.
   }
   block_wall_1 : block {
      location = r1
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
   block_wall_2 : block {
      location = r2
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
   block_wall_3 : block {
      location = r3
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
   block_wall_4 : block {
      location = r4
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
} 

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {csda}?
   ask_quit                                       = Do you wish to quit {csda}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {csda}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
      }
   }
}

## Print the objective when the game starts

on_startup {
   : print "{csda}: EctoComp 2025 Petite Mort game" ;
   : press_any_key ;
   : clear_screen;
}

## Execute this every time a player moves or redescribes a location

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
}

on_render {
   : if (showing_map) {
      : if (is_at "wall_crowned" && point_walk_round) {
         : overlay "o_wall_crowned" x="0" y="16" ;
      }
   }
}

assets {
   graphics {
   # overlays
      o_wall_crowned : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAYAQMAAAAvTrFnAAAABlBMVEX///+AgIBizNOVAAAAAXRSTlMAQObYZgAAACtJREFUKFNjYBgigP0BfppB/gd+msH+D36asIL6f/hpKij4/x8/PaqAPgoAytGDTRmnj0oAAAAASUVORK5CYII=" ;

   # rooms
      r_wall_crowned : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAAACAgAD/AAD//wAAAP8SxTJ0AAAAr0lEQVR4XsyTsQ3AMAgEs8IJFkFMgJT9Z0qRBkP9Slz+PdLJNtd9HhiBmk+B8hFI+Rbw8joTKd8CeHEmAv61wJ+foPyG8U+EfAsAFkDPdHwLFJAJdEUd3wLYW4iuKORbIAMLLHtBy/cNWAxDBf+tQEVmWKZ5C7V8ryGMNVHzazTWvJo/7dSxCQBADMSw8KN4/yF/jGt0kF6k8M3Xq+UB3Hy1/QGADgDoAIAOAOgAwAc4WsdzbGzXvgAAAABJRU5ErkJggg==" ;

      r_wee_clink : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAgIDAwMAAXXgPAAAAyElEQVR4Xu3WMQoDIRAF0MFqSZ9+mdKjpAzJfSQQGDxF1krmlCk0/MYt/Cm2SKZywX18/IXKfTTR3R/+mf5Rh1v3gRoB1DgNIEJbMgAi1EgBnqRP8Eng1oJn71Pa4nwQUEW+BMyOSPBPcB0neJKACA/0YQGzrGpWVGngpMFSWWkg5VVtKYEGlhw02Uv1qDPgW7iME2yTAFogAbRAAmiBBvgzGLew/VILcdxCnQPQAg2gBRLA9U4CeGAQAH5rFAMUAJkCMoCyD7wBMsQsMHU9JoUAAAAASUVORK5CYII=" ;

      r_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAYAQMAAAAvTrFnAAAAA1BMVEX//wCKxvRFAAAAD0lEQVR4XmPAAKNgFIwCAAMYAAFrMpCEAAAAAElFTkSuQmCC" ;
   }
}
