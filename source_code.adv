start_at = "wee_clink"
start_theme = my_theme

#cch.py makes sure of things

game_information {
   game_name                    = Chez Dark Shade Ark
   game_version                 = 1.0.0
   game_shortname               = cdsa
   written_by                   = Andrew Schultz
   uuid                         = 9a53454f-9f3c-4af9-b93a-4a04c86c6c96
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of {wp} and {ut}
}


## Defines locations in the world

strings {
   # general strings
   a_num : string "<an umber, uhh, number<#f80>>" ;
   cdsa : string "<Chez Dark Shade Arc<#f80>>" ;
   gsgr : string "<Go-Strange-Ghost Range<#f80>>" ;
   ut : string "<Us Too<#f80>>[http://andrewschultz.itch.io/us-too]" ;
   wp : string "<Why Pout<#f80>>[http://andrewschultz.itch.io/us-too]" ;
   note_once : string "<ONE-TIME NOTE:<#f0f>> " ;
   r_blob : string "<Blah, Bland Blob Land<#ccc>>" ;
   r_sasf : string "<Self-Arm-Sell Farm<#ff0>>" ;
   sosc : string "<sunk old sun, cold<#ccc>>" ;
   yn_or_12_or_14 : dynamic_string {( (verb_is "save" || verb_is "load") ? "Please choose from 1 to 4." : in_number_choice ? "Please choose 1 or 2." : "Please choose YES/Y or NO/N." )}
   ecomp : string "<EctoComp<#f80>>[https://itch.io/jam/ectocomp-2025]" ;

   my_score : string "{score}/{max_score}" ;

   # commands
   v_about : string "<ABOUT<#0f0>>" ;
   v_credits : string "<CREDITS<#0f0>>" ;
   v_history : string "<HISTORY<#0f0>>" ;
   v_i : string "<I<#0f0>>" ;
   v_score : string "<SCORE<#0f0>>" ;
   v_verbs : string "<VERBS<#0f0>>" ;
   xme : string "<X ME<#0f0>>" ;
   xnumhint : dynamic_string {( "will see general hints for " + (ever_x_me ? "{xnum}" : "the item from {xme}") + "." )} ;
   xnum : string "<X NUMBER<#0f0>>" ;

   # keyboard stuff
   key_enter : string "the <ENTER<#f88>>/<RETURN<#f88>> key" ;

   # item names, with puzzle

   puz_demon_fit : string "<demon, fit<#f4f>>" ;
   puz_gray_tanks : string "<gray tanks<#f4f>>" ;
   puz_thief_lord : string "<thief lord<#f4f>>" ;
   puz_fir_static : string "<fir (static)<#f4f>>" ;
   puz_wall : string "<wall, crowned<#f4f>>" ;
   puz_heist : string "<HEIST! ROBBERY!<#f4f>>" ;
   i_aid_art : string "<aid art<#f4f>>" ;

   # item names, no puzzle
   bdb_ankh : string "<brew-dank-brood ankh<#ccc>>" ;

   # variable item descriptions
   desc_fir_static : dynamic_string {( point_first_attic ? "The {puz_fir_static} holds no more secrets." : "The {puz_fir_static} looks like it can hold more." )} ;

   # location stuff
   r00_header : dynamic_string {( return_sly_maps ? "<A Cramp-Ache Ramp<#f80>>" : point_sly_maps ? "{r_blob}" : "<Slime Apps<#f80>>" )} ;
   r00_loc_desc : dynamic_string {( return_sly_maps ? "A ramp leads up east. Back north, the wall." :
      point_sly_maps ? "The slime is slowly oozing away. Come back in a bit to see what's there." :
      "Slime apps leave ooze blocking passage every way but back north." )} ;
   r00_nogo : dynamic_string {( "You can only go north" + (return_sly_maps ? " or east." : ".") )} ;

   r01_loc_desc : dynamic_string {( "A {puz_wall}. You don't want to go back into the wee clink, so you probably want to " + (point_walk_round ? "Go north, east, south or down, where you found exits in the wall." : "find exits in the wall somehow.") )} ;
   r01_nogo : dynamic_string {( point_walk_round ? "You can't go that way, but there are exits north, south, east and down." : "The {puz_wall} is blocking you. You need to find a way through. There must be at least one, if you look enough." + " {r01_noback}" )} ;
   r01_noback : string "You don't want to go back <IN<#f80>> to the wee clink." ;

   r02_header : dynamic_string {( return_off_lame ? "<Gulf, Lying<#f80>>" : point_off_lame ? "{r_blob}" : "<Awe Flame<#f80>>" )} ;
   r02_loc_desc : dynamic_string {( (point_gull_flying ? "The gull, flying, showed you a path east." : return_off_lame ? "You're in a gulf, lying. Like you can't really go anywhere further. Right?" : "An awe-flame distracts you from everything.") + "\nOf course, nothing obstructs your path back south." )} ;
   r02_nogo : dynamic_string {( return_off_lame ? "You see no passage." : point_off_lame ? "You should come back and look for new exits once the land's healed from the flame." : "The awe-flame distracts you too much from finding new exits." )} ;

   r10_header : dynamic_string {( point_great_ankhs ? "<Great Ankhs<#f80>>" : "<Gray Tanks<#888>>" )} ;
   r10_loc_desc : dynamic_string {( "This place is covered with " + ( point_great_ankhs ? "great ankhs" : "{puz_gray_tanks}" ) + ". It's too desolate everywhere except back west." )} ;
   r10_nogo : string "You can only go back west." ;

   r11_header : dynamic_string {( "<Pond, Icy<#f80>>" )} ;
   r11_loc_desc : dynamic_string {( "Back west is the wall. There's also a forbidding passage down past the pond." )} ;
   r11_nogo : string "You can only go back west or down." ;

   r12_header : dynamic_string {( point_arbor_dens ? "<Arbor Dens<#f80>>" : "<Our Burdens<#f80>>" )} ;
   r12_loc_desc : dynamic_string {( ( point_first_attic ? "You've made things real verdant here. Can't be much left." : point_arbor_dens ? "There are a bit more trees now, but one particularly stands out." : "It's bare and desolate here." ) + "\nThe only way back is west." )} ;
   r12_nogo : string "You can only go back west." ;

   r20_header : dynamic_string {( "<\"Do Dark, Dude\" Ark<#ff0>>" )} ;
   r20_loc_desc : dynamic_string {( "Hoo boy it's dark in here. You can only go back up." )} ;
   r20_nogo : string "You can only go back up." ;

   r21_header : dynamic_string {( point_deem_unfit ? "<Tomb Eek-Too-Meek<#f80>>" : "<Tomb End-To-Mend<#f80>>" )} ;
   r21_loc_desc : dynamic_string {( "This is where the maze ends. You can only go back north." )} ;
   r21_nogo : string "You can only go back north." ;

   r22_header : dynamic_string {( "<Maze Which May Switch<#f80>>" )} ;
   r22_loc_desc : dynamic_string {( "There's a maze to the south, though you can go back up, too." )} ;
   r22_nogo : string "The maze is south, or you can go back up." ;

   r_desc_sasf : dynamic_string {( (has_visited "sell_farm" ? "The anthropomorphic fruits wait around. They still regard you warily, but maybe if you ask for their leader, they might give you an audience." : "A bunch of anthropomorphic fruits sit around and regard you suspiciously. As if you're the weird one here. They say, are you looking for anybody? Our leader is busy right now. They won't just see anybody. We will tolerate you different types around here. But don't expect to make friends.") + "\nYou don't feel you fit in here, but there's nothing to do back east. Maybe something you have on you will start negotiations." )} ;

   custom_unknown_verb_error : dynamic_string {( "Nothing special happens. You can use {v_verbs} for a general overview of standard verbs." )} ;
   exits_err : dynamic_string {(
      is_at "wee_clink" ? "You need to figure a puzzle to leave, and when you do, you'll automatically go out." :
      is_at "r00" ? "{r00_nogo}" :
      is_at "r01" ? "{r01_nogo}" :
      is_at "r02" ? "{r02_nogo}" :
      is_at "r10" ? "{r10_nogo}" :
      is_at "r11" ? "{r11_nogo}" :
      is_at "r12" ? "{r12_nogo}" :
      is_at "r20" ? "{r20_nogo}" :
      is_at "r21" ? "{r21_nogo}" :
      is_at "r22" ? "{r22_nogo}" :
      is_at "sell_farm" ? "Nothing beyond here. You must call the fruits' leader to you." :
      "You can't go that way. I should have a non-default message." )} ;
   nospecial_custom : string "You see no specific item like that. For rooms, <LOOK<#0f0>>. Note that this game may not note adjectives as synonyms, so use nouns." ;
}

integers {
   score : integer "0" ;
   max_score : integer "13" ;

   clue_number : dynamic_integer {(
      is_at "wee_clink" ? 44 :
      is_at "r00" ? (point_sly_maps ? 0 : 34) :
      is_at "r01" ? (point_walk_round ? 0 : 45) :
      is_at "r02" ? (!point_off_lame ? 34 : (!point_gull_flying && return_off_lame) ? 46 : 0) :
      is_at "r10" ? (point_great_ankhs ? 0 : 55) :
      is_at "r11" ? (point_pawn_dicey ? 0 : 45) :
      is_at "r12" ? (point_first_attic ? 0 : point_arbor_dens ? 55 : 54) :
      is_at "r20" ? (point_the_floored ? 0 : 47) :
      is_at "r21" ? (point_deem_unfit ? 0 : 45) :
      is_at "r22" ? (point_walk_round ? 0 : 45) :
      is_carried "aid_art" ? 14 :
      is_at "sell_farm" ? 410 :
      0
      )} ;
}

booleans {
   # points and quasi-points
   point_weak_link : boolean "false" ;
   point_walk_round : boolean "false" ;
   point_off_lame : boolean "false" ;
   return_off_lame : boolean "false" ;
   point_sly_maps : boolean "false" ;
   return_sly_maps : boolean "false" ;
   point_a_dart : boolean "false" ;
   point_pawn_dicey : boolean "false" ;
   point_gull_flying : boolean "false" ;
   point_arbor_dens : boolean "false" ;
   point_first_attic : boolean "false" ;
   point_great_ankhs : boolean "false" ;
   point_deem_unfit : boolean "false" ;
   point_the_floored : boolean "false" ;
   return_the_floored : boolean "false" ;
   point_hi_strawberry : boolean "false" ;

   progress_x_sly : boolean "false" ;
   progress_x_key : boolean "true" ;
   progress_full_map : boolean "false" ;
   progress_got_dart : boolean "false" ;
   progress_ankh_used : boolean "false" ;

   think_great_ankhs : boolean "false" ;
   think_deem_unfit : boolean "false" ;
   think_the_floored : boolean "false" ;
   think_hi_strawberry : boolean "false" ;

   got_think : dynamic_boolean {( think_great_ankhs || think_deem_unfit || think_the_floored || think_hi_strawberry )} ;
   at_end : dynamic_boolean {( is_at "sell_farm" && point_the_floored )} ;

   # map rendering booleans
   showing_map : boolean "true" ;

   # flags for one time notes, etc.
   warn_generic_credit : boolean "false" ;
   warn_hints : boolean "false" ;
   warn_score_header : boolean "false" ;

   intro_shown_yet : boolean "false" ;
   ever_x_me : boolean "false" ;
   ever_x_number : boolean "false" ;
   wait_yet : boolean "false" ;

   in_number_choice : boolean "false" ;
}

vocabulary {
   : verb / aliases = [gt, goto]
   : verb / aliases = [in, enter]
   : verb / aliases = [out, exit]

   # nouns are of course tricky
}

locations {
   wee_clink : location "It sure is claustrophobic in here. You're not sure how to get out. The only think you see in the outside is a {sosc}." header="<Wee Clink<#ff0>>" graphic="r_wee_clink" {
      on_command {
         : match "_ sun;_ sunk;_ old;_ cold" {
            : print "It's out of reach. It doesn't seem to give out light. It sets the mood for, well, pretty much everything here. Perhaps its gloom and doom could be a clue." ;
         }
         : match "weak link" {
            : print "There you go." ;
            : set_true "point_weak_link" ;
            : gosub "add_point" ;
            : press_any_key ;
            : goto "r01" ;
            : redescribe ;
         }
         : match "weak _;_ link" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }
   sell_farm : location "{r_desc_sasf}" header="{r_sasf}" graphic="r_sell_farm" {
      on_describe {
         : match "_ fruits" {
            : print "Well, what you really need to do here, is get in touch with their leader. One item must have a clue as to its identity." ;
         }
      }
      on_command {
         : match "hi strawberry;high strawberry" {
            : print "You wonder what the weird thing in the {me_code} could be. The thief lord said it was something weird, and that certainly fits the bill. You call out for a giant strawberry, perhaps one of royal lineage, which seems pretty weird, but it can't be as evil as, say, junk food, or liver or whatever. Yuck." ;
            : print "But it looks really embarrassed when it shows up. You ask what's the matter." ;
            : set_false "showing_map" ;
            : update_graphic "s_hist_1" ;
            : press_any_key ;
            : print "It says, well, I feel really embarrassed, because I was the one who threw you in jail in the first place. In the weak link." ;
            : print "\"Oh, man. What are you even talking about?\" You ask. It says, \"Well, somebody told me that it was the person that I least expected that would do something to me. And I figured that the thief Lord was pretty suspicious, but on the other hand, they were someone I expected, so I knew better. So I look for someone played, someone who maybe had a lot to high, and you certainly fit the bill, like someone they wouldn't expect to be a robber. So I threw you in the click. I feel kind of dumb now, but I guess it worked out okay?\"" ;
            : update_graphic "s_hist_1" ;
            : print "This is all very awkward, and you can't help cursing under your breath, until you nod and say, okay, well, I guess I was the right choice with what I was able to do. The strawberry nods. \"Let's take care of those folks. War!!!!!\"" ;
            : print "\"Wait a minute,\" you say, \"you're being rash again. If you just want to protect yourself against the thief lord, why not just destroy the sword-or-sore door for good?\"" ;
            : print "\"That makes a ton of sesnse,\" says the strawberry. \"The thief lord never took anything we could do without.\"" ;
            : print "Obviously, if it could be done without weapons, that would be best, but they have no clue. You, however, do. It's a sword or sore door, right? So you say, soar, door, and you say \"'S ORDER.\" It's a bit convoluted, so you hope it works, and it turns out it does! All the slight mispronunciations, or alternate pronunciations, have given you strength along the way to make this one work. The door can no longer bring the Thief Lord back." ;
            : print "You do so. The strawberry apologizes for inconveniencing you. Then you remember all those places you meant to visit, books you meant to read, etc. that you just didn't. Your time in jail helped you focus on that, and getting stuff done here made you feel more up to it now. That's something." ;
            : print "Everyone walks over to destroy the portal." ;
            : set_true "point_hi_strawberry" ;
            : set_false "think_hi_strawberry" ;
            : gosub "add_point" ;
            : set_true "showing_map" ;
            : win_game ;
            : done ;
         }
      }
   }
   r00 : location "{r00_loc_desc}" header = "{r00_header}" {
      on_command {
         : match "sly maps" {
            : print "You were worried about looking through all the slime at first, because you didn't know what to look for, and it would be too messy. But since you decided you might be looking for maps, you were able to focus, and not worry about certain blobs which pretty much could not hold them. And what do you know? You find half of a particularly clever map. Why, you might call it a sly map, with how carefully it was hidden." ;
            : set_true "point_sly_maps" ;
            : gosub "add_point" ;
            : pocket "sly_maps" ;
            : done ;
         }
         : if (!point_sly_maps) {
            : match "sly _;_ maps" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r01 : location "{r01_loc_desc}" header = "<Wall, Crowned<#ff0>>" graphic="r_01_0" {
         on_command {
         : match "walk round" {
            : print "Certainly the wall looks intimidating at first. You're still getting your bearings. But after a while, you stop being impressed and blown away, and you realize you can take your time to look around. Nobody is after you. You find one door, then another, then two more. You wonder if there might be a final one, but really, if it is, you can find it later when you're more aware of your goals. You have enough to explore for the moment. There's even one leading down. They all look pretty safe, at least at first." ;
            : set_true "point_walk_round" ;
            : gosub "add_point" ;
            : press_any_key ;
            : done ;
         }
         : match "walk _;_ round" {
            : gosub "say_half" ;
            : done ;
         }
      }
      on_describe {
         : if (point_the_floored && !return_the_floored) {
            : print "Hmm. The documents you found showed a new door to the left, and when you have a look -- there it is. It must've gotten lost in the shuffle." ;
            : set_true "return_the_floored" ;
         }
         : if (point_off_lame && !return_off_lame) {
            : set_true "return_off_lame" ;
         }
         : if (point_sly_maps && !return_sly_maps) {
            : print "As you returned, you uncovered something cool: a {hope_light}! That should help with the dreariness to the north." ;
            : pocket "hope_light" ;
            : set_true "return_sly_maps" ;
         }
      }
   }
   r02 : location "{r02_loc_desc}" header = "{r02_header}" {
      on_command {
         : match "off lame" {
            : print "The flame seems impressive at first, but once you stop staring at it, you realize it's contained, and it's not going to catch and go anywhere else. In fact, instead of being odd by it, you're glad it provides like to look at other places. And that light turns up. However, as you stare at it more, it sort of burns away, and you can't see it anymore. Unfortunately, it burns out enough that you can't find a way forward, for the moment. Maybe you will find a light source later." ;
            : set_true "point_off_lame" ;
            : gosub "add_point" ;
            : pocket "key_nigh" ;
            : done ;
         }
         : if (!point_off_lame) {
            : match "off _;_ lame" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (return_off_lame) {
            : match "gull flying" {
               : if (point_gull_flying) {
                  : print "Already done!" ;
                  : done ;
               }
               : print "No, you think, the light wouldn't have shown the passage to the gulf without being more explicit that there was hope. The gulf seems to say, no, there really is nowhere else, but you also know that by water, there are signs and animals you can look for. You discover a gull and note them flying east. Once you know there's a passage that way, your mind is clearer, and you see the passage now." ;
               : set_true "point_gull_flying" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_gull_flying) {
               : match "gull _;_ flying" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r10 : location "{r10_loc_desc}" header = "{r10_header}" {
      on_command {
         : match "great ankhs" {
            : if (!point_pawn_dicey && !point_a_dart) {
               : print "These tanks are tough. It can't happen just by wishing." ;
               : set_true "think_great_ankhs" ;
               : done ;
            }
            : if (!point_a_dart) {
               : print "The pawn shrugs. It can't do much without a weapon." ;
               : set_true "think_great_ankhs" ;
               : done ;
            }
            : if (!point_pawn_dicey && !point_a_dart) {
               : print "Perhaps you could find someone or something to shoot the dart at the tanks just right, but there's no chance you can." ;
               : set_true "think_great_ankhs" ;
               : done ;
            }
            : if (point_great_ankhs) {
               : print "You already transformed the tanks!" ;
               : done ;
            }
            : print "Great ankhs rise from the ground. A voice says: \nTake this. You have performed well. It will not make you unhappy, but it will make mean people or entities around you unhappy. It is a ... {bdb_ankh}.\"" ;
            : set_true "point_great_ankhs" ;
            : destroy "gray_tanks" ;
            : create "great_ankhs" ;
            : set_false "think_great_ankhs" ;
            : pocket "brood_ankh" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_great_ankhs) {
            : match "great _;_ ankhs" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r11 : location "{r11_loc_desc}" header = "{r11_header}" graphic="r_11_0" {
      on_command {
         : match "pawn dicey" {
            : if (point_pawn_dicey) {
               : print "You already found an ally here." ;
               : done ;
            }
            : print "Looking around the pond, you look for friends, any sort, and you find it in the guise of a pawn. It looks a little shifty, and this worries you, but it says, well, I have to look shifty around here, it will be suspicious if I don't. I'll tell you what, I know some secrets. I'm a pretty good marksman, and I can take innocuous things and make them into something powerful, maybe not lethal, but they can change the nature of something that is intimidating you. Your soul. You don't seem to have many other friends to help you here, so you'll take what you can get." ;
            : set_true "point_pawn_dicey" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_pawn_dicey) {
            : match "pawn _;_ dicey" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r12 : location "{r12_loc_desc}" header = "{r12_header}" {
      on_describe {
         : if (point_arbor_dens) {
            : print {( "A fir (static) sits here. You " + ( point_first_attic ? "got something from it" : "haven't unlocked its mysteries yet" ) + "." )} ;
         }
      }
      on_command {
         : match "arbor dens" {
            : if (point_arbor_dens) {
               : print "You already made this place less depressing." ;
               : done ;
            }
            : print "You look past all the whining, and there's actually somewhere much nicer to be, better irrigated, and so forth, all sorts of trees all over the place. Most of them seem pretty happy and well kept up, but there is one fir, static, in the middle of them all." ;
            : set_true "point_arbor_dens" ;
            : create "fir_static" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_arbor_dens) {
            : match "arbor _;_ dens" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_arbor_dens) {
            : match "first attic" {
               : if (point_first_attic) {
                  : print "You already discovered the first attic!" ;
                  : done ;
               }
               : print "You wonder what a fir (static) could hide. But you look around. You stare at it. Slowly it starts to sway, fist one direction, then another. Off in one very cold attic is a free-speech-freeze peach." ;
               : pocket "freeze_peach" ;
               : set_true "point_first_attic" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_first_attic) {
               : match "first _;_ attic" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r20 : location "{r20_loc_desc}" header = "{r20_header}" graphic="r_20_0" {
      on_describe {
         : if (!point_the_floored) {
            : print "A {puz_thief_lord} stands here, guarding its treasures, whatever they're worth. It's very vigilant." ;
         }
      }
      on_command {
         : match "floored -" {
            : if (!point_the_floored) {
               : print "Floored is right, but this is a bit tricky. Adventuron doesn't parse articles, and I didn't want two potential one-word solutions, so you need something similar." ;
               : done ;
            }
         }
         : match "thee floored" {
            : if (!point_deem_unfit) {
               : print "The thief lord can't be floored by you alone. You need a distraction." ;
               : set_true "think_the_floored" ;
               : done ;
            }
            : if (point_the_floored) {
               : print "But you already got rid of the thief." ;
               : done ;
            }
            : print "The {poach_arm} distracts the thief enough, poking through silly trinkets, that they are floored by your accusations and so forth, and your threats, and all that sort of thing." ;
            : print "Wow, they sure seem tough, but you managed to find a way to deal with them. The thief goes back through the portal, ostensibly to plan hard to Show You. They could Show You now, but once they get their friends together, they'll really Show You!" ;
            : print "As the thief is about to leave, The {poach_arm} discovers a {me_code} and flips it your way. The thief sees this and grabs the {poach_arm}, which is actually a really bad idea since the {poach_arm} isn't going to work FOR the thief." ;
            : set_true "point_the_floored" ;
            : set_false "think_the_floored" ;
            : pocket "me_code" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_the_floored) {
            : match "the _;thee _;_ floored" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r21 : location "{r21_loc_desc}" header = "{r21_header}" graphic="r_21_0" {
      on_describe {
         : if (!point_deem_unfit) {
            : print "A {puz_demon_fit} stands here, contemptuous of you, surprised you haven't fled yet." ;
         }
         : if (!progress_ankh_used) {
            : print "The {bdb_ankh} glows. The demon looks horrified. It becomes less talkative. But it is not defeated yet. You must do the rest." ;
            : set_true "progress_ankh_used" ;
            : destroy "brood_ankh" ;
         }
      }
      on_command {
         : match "deem unfit" {
            : if (point_deem_unfit) {
               : print "You already got rid of the demon!" ;
               : done ;
            }
            : if (!point_first_attic) {
               : print "You thought you had some good points, but the demon (fit) roars back at you with a variety of rhetorical debating techniques, before suggesting you're lucky they didn't use violence. If only you had some way to trip them up." ;
               : set_true "think_deem_unfit" ;
               : done ;
            }
            : print "You start to deem the demon unfit, which starts a big reductive argument with them over how that's too easy and obvious and silly. You mention that they were the ones calling themselves fit, and if they didn't see this, or prep to defend themselves against accusations, they deserve ... uh, you're not sure. But the demon seems flustered by this, not really used to arguments where they're challenged. They're a demon, cool. \"Not someone to deem uncool, right?\" you say." ;
            : print "That does it! They stomp off. They wonder why they were guarding this place anyway. There's no loot left. No adventurers that are fun to beat up." ;
            : print "You look around to see if any treasure is left. You don't want to go peeking in tombs, and the only thing you find is a po' charm-poach arm, which doesn't seem to have gotten a lot of use. You take it." ;
            : pocket "poach_arm" ;
            : set_true "point_deem_unfit" ;
            : set_false "think_deem_unfit" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_deem_unfit) {
            : match "deem _;_ unfit" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r22 : location "{r22_loc_desc}" header = "{r22_header}" graphic="r_22_0" {
      on_command {
         : match "s _" {
            : if (!progress_full_map) {
               : if (point_sly_maps && point_off_lame) {
                  : print "You haven't found a way through the maze. But maybe examining something in your inventory will help." ;
                  : done ;
               }
               : if (point_sly_maps || point_off_lame) {
                  : print "You see no way through the maze, even though you have something useful in your inventory that helps halfway." ;
                  : done ;
               }
               : print "You have nothing that could help you through the maze. You don't want to go getting lost." ;
               : done ;
            }
            : if (!progress_got_dart) {
               : print "You use the map and the key to work your way through the maze. Well, near the end. But something supernatural and scary lies near the end. You have to flee. However, in the process, you find some {i_aid_art} in the maze. It may help elsewhere." ;
               : pocket "aid_art" ;
               : set_true "progress_got_dart" ;
               : done ;
            }
            : if (!point_great_ankhs) {
               : print "You get to the end of the maze, but some great evil blows you back. You have no protective item." ;
               : done ;
            }
            : if (!has_visited "r21") {
               : mask {
                  : print "Ah, yes, that's the way through." ;
                  : set_false "showing_map" ;
                  : update_graphic "s_maze_thru" ;
                  : set_true "showing_map" ;
               }
            }
         }
      }
   }
}

# Defines things in the world (scenery cannot be carried)

objects {
   cold_sun : scenery "{sosc}" msg="<see command>" at="wee_clink" conspicuous="false" ;
   key_nigh : object "keen (aye!) key nigh" msg="You revisit the key to see one-half of a maze." ;
   sly_maps : object "sly maps" msg="One-half of a maze." ;
   hope_light : object "<\"Ho! Plight? Hope!\" light<#ccc>>" msg="The {hope_light} provides a reassuring light." ;
   fir_static : scenery "{puz_fir_static}" msg="{desc_fir_static}" conspicuous="false" ;
   aid_art : object "{i_aid_art}" msg="It's about as helpful as art can be. Maybe you can make it into something more useful." ;
   dart : object "a dart" msg="It's the dart you got from the aid art." ;
   freeze_peach : object "a free-speech-freeze peach" msg="You'd think it would exhibit a chilling effect on you, but you feel a bit freer to speak your own mind or realize you have a right to cut in around people who talk too much." ;
   poach_arm : object "a po'-charm-poach arm" msg="It doesn't seem to be after big treasure. It seems like it could be a real nuisance, though." ;
   brood_ankh : object "a brew-dank-brood ankh" msg="It doesn't seem to affect you, but apparently it can help you take meanies or worse down a peg or five." ;
   me_code : object "a meek \"owed, me\" code" msg="A list of grievances about why the Thief Lord was right to steal. It has {heist} written in it a lot." ;

   # scenery e.g. non-default description may need to go in on_describe block
   demon_fit : scenery "{puz_demon_fit}" msg="It sure seems confident in its ability to annoy you." at="r21" conspicuous="false" ;
   say_fruits : object "safe-root-say fruits" msg="All sorts of fruits, with some notable exception. They seem leaderless." at="sell_farm" conspicuous="false" ;
   thief_lord : scenery "{puz_thief_lord}" msg="Keeping a close eye on you." at="r20" conspicuous="false" ;
   gray_tanks : scenery "{puz_gray_tanks}" msg="Very intimidating and warlike." at="r10" conspicuous="false" ;
   great_ankhs : scenery "great ankhs" msg="They radiate peace and stillness." conspicuous="false" ;
}

connections {

   ## Connects locations together (bidirectional)

   from, direction, to = [
      r01, enter, wee_clink
      r01, north, r02
      r01, south, r00
      r01, west, sell_farm
      r01, down, r22
      r01, east, r11
      r02, east, r12
      r00, east, r10
      r22, south, r21
      r11, down, r20
   ]

}

barriers {
   block_from_clink : block {
      location = r01
      block_when_not = point_weak_link
      message = You haven't found a way out yet.
   }
   block_to_clink : block {
      location = wee_clink
      block_when = point_weak_link
      message = You have no desire or need to go back to the wee clink.
   }
   block_r01_w : block {
      location = sell_farm
      block_when_not = point_the_floored
      message = {r01_nogo}
   }
   block_r01_n : block {
      location = r02
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r01_s : block {
      location = r00
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r01_d : block {
      location = r22
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r01_e : block {
      location = r11
      block_when_not = point_walk_round
      message = {r01_nogo}
   }
   block_r02_e : block {
      location = r12
      block_when_not = point_gull_flying
      message = {r02_nogo}
   }
   block_r00_e : block {
      location = r10
      block_when_not = return_sly_maps
      message = {r00_nogo}
   }
   block_from_end : block {
      location = r01
      block_when = at_end
      message = No point retreating to look for more. You feel you have what you need, if you just know what to look for.
   }
}

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {cdsa}?
   ask_quit                                       = Do you wish to quit {cdsa}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {cdsa}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
   you_see_nothing_special = {nospecial_custom}
   you_see_nothing_special_2 = {nospecial_custom}
      }
   }
}

## Print the objective when the game starts

on_startup {
   : print "{cdsa}: {ecomp} 2025 Petite Mort game" ;
   : press_any_key ;
   : clear_screen;
}

## Execute this every time a player moves or redescribes a location

on_describe {
   : if (!intro_shown_yet) {
      : print "{note_once}{cdsa} uses a reduced parser. {v_verbs} details them, though standard starting commands like {v_about} and {xme} may help you get started." ;
      : set_true "intro_shown_yet" ;
   }
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : match "z _;wait _" {
      : print "\"Loaf, right? Lo, fright!\"" ;
      : if (!wait_yet) {
         : print "{note_once}This is just a silly general response. Waiting gives no penalty or benefit." ;
         : set_true "wait_yet" ;
      }
   }
   : if (is_carried "aid_art") {
      : match "dart -" {
         : if (point_a_dart) {
            : print "Already done!" ;
            : done ;
         }
         : destroy "aid_art" ;
         : pocket "dart" ;
         : print "Narrative text." ;
         : set_true "point_a_dart" ;
         : gosub "add_point" ;
         : done ;
      }
      : if (!point_a_dart) {
         : match "dart _;_ dart" {
            : print "You just technically need one word, due to how Adventuron processes certain words." ;
            : done ;
         }
      }
   }
   : if (is_carried "key_nigh" && is_carried "sly_maps") {
      : match "x key; x map;x maps;x sly;x nigh" {
         : print "You notice the key and the map come together to form a full maze. This could be useful later!" ;
         : set_false "showing_map" ;
         : update_graphic "s_maze_full" ;
         : set_true "showing_map" ;
         : set_true "progress_full_map" ;
         : done ;
      }
   }
   : if (is_carried "key_nigh") {
      : match "x key;x nigh" {
         : print "You see the bottom half of a maze." ;
         : set_false "showing_map" ;
         : update_graphic "s_maze_s" ;
         : set_true "showing_map" ;
         : done ;
      }
   }
   : if (is_carried "sly_maps") {
      : match "x map;x maps;x sly" {
         : print "You see the top half of a maze." ;
         : set_false "showing_map" ;
         : update_graphic "s_maze_n" ;
         : set_true "showing_map" ;
         : done ;
      }
   }
   : if (point_the_floored) {
      : match "hi strawberry;high strawberry" {
         : print "You look around to find someone or something to notify of the heist robbery, but they're not here." ;
         : set_true "think_hi_strawberry" ;
         : done ;
      }
      : if (!point_hi_strawberry) {
         : match "hi _;high _;_ strawberry" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }

   : match "about _" {
      : print "{cdsa} is a simplified-parser game that requires two-word commands to solve puzzles. Some puzzles rely on others. A few have alternate spellings. One, due to Adventuron's parser, can eliminate the first (very common) word. {cdsa} should always say if you are half-right." ;
      : print "" ;
      : print "{cdsa}'s main area is 3x3, with the start and end rooms falling outside. Originally I wanted to make it symmetrical, but unfortunately the clearest way to do so would draw a hate symbol. You know which one. So if you want to map {cdsa} on your own, the left 2x3 are ground level, and the first room is center west." ;
      : print "" ;
      : print "For thanks, {v_credits}." ;
      : print "For a more detailed history, {v_history}." ;
      : print "For verbs to use, {v_verbs}." ;
      : print "Note {cdsa} uses a color-coding scheme. Stuff to change is <lavender<#f4f>>, while stuff that's just for amusement is <grey<#ccc>>." ;
   }
   : match "credits _;credit _" {
      : print "Thanks to the organizers of {ecomp} past and present." ;
      : print "Thanks to Chris Ainsley for creating Adventuron." ;
      : print "Thanks to <mazegenerator.net<#0f0>>[http://www.mazegenerator.net] for generating the maze seen in some graphics." ;
      : print "Blanket thanks to Python and its developers for scripts that helped me generate similar code (point scoring, etc.) quickly." ;
      : if (!warn_generic_credit) {
         : print "{note_once}you can see generic Adventuron credits with <*CREDITS<#f80>>." ;
         : set_true "warn_generic_credit" ;
      }
   }
   : match "help _;hint _;hints _" {
      : if (!warn_hints) {
         : print {( "{note_once}there are no explicit in-game hints beyond how to leave the starting room. So you " + (point_weak_link ? "will see {xnumhint}." : "will see how to get the first point, until you leave the clink. Then you will see {xnumhint}." ) )};
         : print "Also, {cdsa} comes with a walkthrough, map and logic flow chart if you want spoilers." ;
         : set_true "warn_hints" ;
         : done ;
      }
      : if (is_at "wee_clink") {
         : cycle key = "firsthint" predictable_order = "true" skip_interval = "0" {
            : print "Standard commands won't help you leave, though WAITing may give an additional clue." ;
            : print "The game title and some things may seem odd. They are a clue of what to do in the wee clink." ;
            : print "Also, the titles of similar games if you type {v_about} then {v_history} may provide clues." ;
            : print "The {cdsa}. The {sosc}. But how do they fit in with the wee clink?" ;
            : print "You need to break up wee clink into two different words with the same sounds, in order. This will help you find somewhere not secure in your jail." ;
            : print "A <WEAK LINK<#f80>>, if you will. (This is the last hint. They will cycle until you leave here.)" ;
         }
         : done ;
      }
      : print "" ;
      : print "You can {xme} for a hint device which is meant to be relatively intuitive." ;
      : print "{xnum} should give you a number. You may be able to guess what it means, but if not, I will give progressive hints." ;
      : print "If {xnum}'s number is 0 or -1, you are done here." ;
      : print "Most of the time, {xnum} gives a two-digit number. If it's blurry, that means nothing to do here yet. But you can still try to guess for future reference. If it's particularly" ;
      : print "If the number is not blurry, {xnum} will not spoil any letters. However ..." ;
      : print "{xnum} will give, in order, the number of letters in each word (tens digit = first, ones = second.)" ;
   }
   : match "history _" {
      : print "{cdsa} came about after {gsgr}, when I just said, what would happen if I had an {ecomp} entry with the leftovers from brainstorming {ut} and {wp}? Obviously some ideas were more amusingly spooky than others, and some words suggested themselves." ;
      : print "" ;
      : print "So {gsgr} formed, and I focused on features. During the stretch run for {ut} in late August, I had a flurry of ideas while procrastinating bug fixes and transcript reading. One of the transcripts was to blame, so to speak: two testers noticed an unintentional red herring in the Cell, Urban ... which might have been a better puzzle than the cell itself, though the cell had a better \"after\" room name. So that was my starting puzzle. Then soon after I saw something indicating the final puzzle. I had to go through with it!" ;
      : print "" ;
      : print "{cdsa} has more rooms than {gsgr} so it doesn't have bells and whistles, but I may add them post-comp. No way was I fitting everything in under four hours." ;
      : print "" ;
      : print "So, late August 2025, then the second half of September 2025." ;
   }
   : match "score _" {
      : print "You've currently scored {score} of {max_score} total points. There are no bonus points." ;
      : if (!warn_score_header) {
         : print "{note_once}This is tracked in the upper left." ;
         : set_true "warn_score_header" ;
      }
   }
   : match "think _" {
      : if (!got_think) {
         : print "There are no commands you figured out before you had the right assistance." ;
         : done ;
      }
      : if (think_deem_unfit) {
         : print "You can <DEEM UNFIT<#f80>> the demon (fit) once you can shut it up a bit." ;
      }
      : if (think_hi_strawberry) {
         : print "You can say <HI STRAWBERRY<#f80>> once you find where it might be." ;
      }
      : if (think_the_floored) {
         : print "You can say <THEE FLOORED<#f80>> to the thief lord once you have more leverage." ;
      }
      : if (think_great_ankhs) {
         : print "You can convert the gray tanks to <GREAT ANKHS<#f80>> once you have something you can use to change them." ;
      }
   }
   : match "verbs _;verb _" {
      : print "{cdsa} uses the four compass directions, along with <UP<#0f0>> and <DOWN<#0f0>> and <IN<#0f0>> and <OUT<#0f0>>. You need to <X<#0f0>>/<EXAMINE<#0f0>> some items you find. They're in your <INVENTORY<#0f0>>, which you can see with <I<#0f0>>. There is no need for <TAKE<#0f0>> or <DROP<#0f0>>, but {v_i} and {v_score} chart your inventory and progress." ;
      : print "Meta-verbs include {v_about}, {v_credits}, and {v_verbs}." ;
      : print "All point-scoring commands have two words which you need to figure." ;
      : print "TSTART/TSTOP start and stop a transcript." ;
   }
   : match "x me;x myself" {
      : if (!ever_x_me) {
         : print "Weird! You see {a_num} on your arm." ;
         : set_true "ever_x_me" ;
         : done ;
      }
      : print "There's {a_num} on your arm, which may or may not help you." ;
   }
   : match "x number;x umber" {
      : set_true "ever_x_me" ;
      : if (!ever_x_number) {
         : print "You don't remember getting a tattoo. And the name sure feels artifical, but hey, any help is better than no help. Plus you don't have to use it." ;
         : print "As you inspect it, it swirls around a bit." ;
         : print "{one_time} the number doesn't distinguish if you have the in-game help needed to solve a puzzle. I was close to 4 hours for {ecomp} Petite Mort when I implemented it." ;
         : set_true "ever_x_number" ;
      } : else {
         : print "You watch the number swirl around a bit more." ;
      }
      : print "The current number is {clue_number}.";
      : if (clue_number == 0) {
         : print "So, nothing to do here." ;
      } : else_if (clue_number > 100) {
         : print "Weird it's so big. Twice as big as it should be." ;
      }
   }
}

on_tick {
}

on_render {
   : if (!showing_map) {
      : done ;
   }
   : if (is_at "r01") {
      : if (point_the_floored) {
         : overlay "o_wall_crowned" x="0" y="16" ;
         : overlay "o_wall_crowned" x="48" y="16" ;
         : overlay "o_wall_crowned" x="96" y="16" ;
         : overlay "o_wall_crowned" x="144" y="16" ;
         : overlay "o_wall_crowned" x="192" y="16" ;
      }
      : else_if (point_walk_round) {
         : overlay "o_wall_crowned" x="0" y="16" ;
         : overlay "o_wall_crowned" x="64" y="16" ;
         : overlay "o_wall_crowned" x="128" y="16" ;
         : overlay "o_wall_crowned" x="192" y="16" ;
      }
   }
   : if (is_at "r02") {
      : if (point_gull_flying) {
         : overlay "o_02_gulls" x="224" y="0" ;
      }
   }
   : if (is_at "r21") {
      : if (!point_deem_unfit) {
         : overlay "o_21_demon_fit" x="134" y="0" ;
      }
   }
   : if (is_at "r20") {
      : if (!point_the_floored) {
         : overlay "o_22_thief_lord" x="134" y="0" ;
      }
   }
}

assets {
   graphics {
   # overlays
      o_wall_crowned : base64_png "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAYAQMAAABwemkHAAAABlBMVEX///+AgIBizNOVAAAAAXRSTlMAQObYZgAAACBJREFUCFtjYCARsD+AMuR/QBn2f9AZ9f9wMv7/pw8DAMy5INRDqbfqAAAAAElFTkSuQmCC" ;

      o_02_gulls : base64_png "iVBORw0KGgoAAAANSUhEUgAAACAAAAAQAQMAAABNzu8aAAAABlBMVEX///+IiIiq3YAXAAAAAXRSTlMAQObYZgAAAC1JREFUCFtjYACBHAYGMwYBhhscQLYCEN9ggDIgcgxAOTBgOwAkGJFJVHkGBgAINgX4QTuJkwAAAABJRU5ErkJggg==" ;
      o_21_demon_fit : base64_png "iVBORw0KGgoAAAANSUhEUgAAADAAAAAoBAMAAABKqWRCAAAAGFBMVEX///8A/wCAAACAAICAgIDAwMD/gED//wDYnRvTAAAAAXRSTlMAQObYZgAAASlJREFUeF6FzdENgzAMBNBQMQCWGACxQug/iOsErdkgZQO6fu3YNCA+egrg+GE5WG59dyi8FOj7oKJ9qQU6q2+dYrCX3vyvrrePPaJCGncd6X1POKaGZAyXACwBTkAUwO/EvLwZevNURM2D1431eemtQPvg5ZPk8GsqQISamd/58Aii3wDAvwA+4rAYpAOQrUgpLctiS2gHEti2bV1XAXKoHD45Dk0Blt9liAuQBsy6ICVmkMZBt1tsdwHCDqAztC6YdqiobbPEO/Mz5v40USNA+YIY788YkccpQwut55gz6Ah8AphaRI/W8Aki77sQ2YSt3mPrf4ACOMFcYPgHRHqO4C21K1QCQQ0FoN2QoQqhLjCG0Cg0V/Ce5gye/zAA8xWsU19h3mFw+ALyGn1QVa1xqwAAAABJRU5ErkJggg==" ;
      o_22_thief_lord : base64_png "iVBORw0KGgoAAAANSUhEUgAAABUAAAAoBAMAAADj3azWAAAAG1BMVEX///8AAP8A4IAA//+AAACAAMCAgIDg4ID/AABNsa8ZAAAAAXRSTlMAQObYZgAAAJFJREFUeF6lyjEKwzAMhWG5g7tWkAMUn8CQK/gAWZzZSzSXYlAOUIiPXcVW0qEpLfSfvgcPfu3knNscpKs6d7m7N55zeARW87zwbqnaA/Bc+La5lEVdT6AGoimqSZqG5kSS2HtvV48JoO+9BXGk+mkexWRpt1C9pk4vR/juQY2IgjcbNB8MeDm2OTIK1Abr/Ksn7QcvObr32koAAAAASUVORK5CYII=" ;

   # rooms
      r_mid : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAAAAAAIBwa344AAAAK0lEQVR4XmNYRSEYXgaMGjBqwKgBowaMGuBCIWAQpBAMFheMumDUBaMuAACbHaY97NTKrAAAAABJRU5ErkJggg==" ;

      r00 : dynamic_graphic {( return_sly_maps ? "r_00_2" : point_sly_maps ? "r_mid" : "r_00_0" )} ;
      r_00_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEWAAAAAAIAA/wCbS6LGAAABM0lEQVR4XmIIpRAMKwNGDRg1YNSAUQNGDQAUQgcpFsMgGIDFVfAUZVbBU8pbDT2FdCX/KQeb5EWGQqWApObjN0QCkzj4wtGolAJ2N41eSgDjCL7wKQAD8PHfXoAcJQkN08p+gebEr0D0ZE7y2BssoOsLQADwqwjSU3/L4cTAJMeOm3iUpHNW73loI7EF7Cu9AE6CAmAAnzswfxy4FmBrl9N8AOzEGRS+vQQ6XAF0EsUJTBm0GocNQGMCNrPwyNmQFY06gKXvDTJwz86AAmBWWooR+JovV1cQJNUYLpZnCeSMFIAUoAk57eQVEHj7ST6/HNIKiNMC7D8w0okisg1eACpQn3QD8QV85JDxBpwAPwF0UAVQgGsAQTIBeQT0AZAbsAH4F9BHgODsG7AN3BsJbABRgT8yoPD/l1zXwAAAAABJRU5ErkJggg==" ;
      r_00_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAAACAAAAAAID/AAD//wBupwDMAAABJElEQVR4XsTOsQ3AMBCAQIoMYmUW7z9TFLmgcvmCBQ7eNKDV96bU/+j0E41uNLrR6EagBwNLPRhY8OxrNLrR6EajG41uNLoxpEcDqAcDwJW5R6MbjW40utHoxow+P7C+3srYhgEYCIEUDJDMkgyA5Nt/pjRv0Uf5fGV9c4CM/RM6oOcX85i6n38LKH3mHY8ORfG2gNIVx4JXjA8G46wnUO/hHsAE0LqAeh96AAmiIC8nUO8JioFYgAWRZOGtO1Dv9RjNwTeBtRb0g1VMwAB3GYPJWg0lUfrAAUd3DT74bAgYukMysctIVgN3DLzPrxMo3VSqjOzuWHuKJbXrtqNrnMJ3BJSe0ZeEBNPktwSUPkWXCUDvwKKA0lv0OGZ9VHx3csKf5gMOF4/O7jGpyQAAAABJRU5ErkJggg==" ;

      r_01_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAAACAgAAAAID/AAD//wAZRjVTAAAArklEQVR4XsyTsQ0EMQgEv4VBNMB1gkT/NX3wCfbGqz+HMwQjbH+e88AF3P4OqLiA1WtAVNRJrF4DiOIkBv/vgDdfQcUD8k5sXgOAbGAzn9eAAmaAnejzGkD+BpoFjV4DpskmhwW9XjeQfRU6/GsDqmc6ZzIW9Hr9hgBs5vYfneBAbv9tp45NAABiIIYFfiTvv9uPcY0O0osUvvl6tTyAm6+2PwDQAQAdANABAB0A+EG4ZUutMkeZAAAAAElFTkSuQmCC" ;

      r02 : dynamic_graphic {( return_off_lame ? "r_02_2" : point_off_lame ? "r_mid" : "r_02_0" )} ;
      r_02_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAADFBMVEXEpIQAAIDggED//wBRHWQIAAABAklEQVR4XsySsQ0DIRAE3SRIXAfgIlwFiXMC7oKP7Y6Me3j59QAbr+zARzQTTLDi4r68vwlkGIJ/FvDZlSUIXgHJLi5BMALFB5mCYQRCkDwUwwjEKEX6MARjxJLOdwqCEajJabEuCMY/eCS/37WegmAEnunapiAYgVvT43qdYASS6mavLjhGwOZGDCOwQRCMgJjaewiOEVAdgmAEvLU2BcMIKATFCBymdkExArYEy5/249gGQBiGguhXSo/ClCkZA1FF35LdU2QWyigsgWAEu6Dhqnt4Eqpe492QIebKETeK07zFjaLstsYNKI+eMZbJM2PIZM0Ywr1mjMItZaAl/H1/N/i03q92ap9JAAAAAElFTkSuQmCC" ;
      r_02_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAADFBMVEXEpIQAAIAA//////9UyLnVAAAAhUlEQVR4XmIIpRAMKwNGDRg1YNSAUQNGDQB0Qsc2AINADEVPYgBGYt9DCn0KBmKEK3CKSAkmlePG3Su+ScPwZ3GfBGT4u/4DwAocOpAQC9B0IBNQhwwUAjxkAJhOFXUAzhF0YFAEuQEDLgNpA04VsMRAlwErBDQdyLECVQfS9L2iacMHuAAxc9ro/jp6oQAAAABJRU5ErkJggg==" ;

      r10 : dynamic_graphic {( point_great_ankhs ? "r_10_1" : "r_10_0" )} ;
      r_10_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAAAAAAIDAwMCAQACAgIDWOnkCAAABVklEQVR4XuzO0QmAMAwE0Kt0AIUMIJ3EQPafSf9SUqwEARHuvi5Akoft4/wdQAABBBBAAAEEEECAWWjp4BVJjqqxjVeQAqwNCQCgXfOglb6nAMsoELuiYZwB0PYSum9FwLNATG9GO6p5m/331ZCzXTJKYRgEguigHkSWHmDBHECauf+ZyiKw0aSx9qc/HYi8FWZ5EFFO0SD9bUV6M5JkTxZIjiN7dQjKOZrIjwRoYU/GNRo4rwqU7SjAlmG8FdgNnMfqXEBZXQYt+8XImmrikSyJ0WBkr04FNiKRXwqQFTQ950WBjS2tSM95hAGK06F9t2lBYIPkIO3YTyP4fJiAk7cnm6YCFdGGKiHk3I40jJcCitQEeh6qtwIqQgLAXEDj86Em6mRFUqTjRYEgkgHE+S/Q2L4DKQBb0PHSL7ArE4hl9givoyZQ0PHCI/Tr74OlPSg/zl/gBQLtO9IThigAAAAAAElFTkSuQmCC" ;
      r_10_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAICAQAD//wBgioY8AAAAjUlEQVR4XtzTuw3AIBRD0StXiCkoEVN6FEqUKZMZnotEcXcaF+/DZ7JOZnbPLMuJ6bATM2EmZkBL/H5BPoMGI3G+RoED55eY/wJzRhZ947rR6Xu5bnQ9cd3kBUderhsh47oBmYJ/UnAvFALCpkIZpPIRBowaELUUyiCVjzBg1ICslVAGqXyGUMoA5QYAAOvZeXzHvZrsAAAAAElFTkSuQmCC" ;

      r_11_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAFVBMVEUAAACAAAAAgACAgAAAAICmyvD///9KEYt2AAABPElEQVR4XsTVwQnEMBBD0W1BoE52GxBR/zUtgpx9S77NyNcHMsyn5LEEA8oBvBAI0AzBANlFAUqFVhDV7CccICQgdoRWIE+BAdRoDwWQ22wgQLyYAgJokcoQQHeG3AX3KmABaklA6yPgehyQM+D7exxQGNAT4HoL8C+fjE4YhmEgajJJkfEC7SYFeQNn/xEaixw1rpFqhBugD0hCfu7lcg405nGPJCSe5UkTWAJssVcKc965QUkMlc0SiCKAr881QsL4EwjgVtQWbuFEF5D4+G5fMsRELiddAwdQhcEoH9gCBwzw8bn0b7gTgLOaL9gNjAZYmp8C8GwPMbRs6gZkBaMRoggdIq+AtOA4htoCwDcNgDSZ7RfADDvSRLBjA5ihg+sFXMcQK1hqQKYAWGNA4GcCAAO8SADYAvQ3Ai8XS2aBEwhq/wAAAABJRU5ErkJggg==" ;

      r12 : dynamic_graphic {( point_arbor_dens ? "r_12_1" : "r_12_0" )} ;
      r_12_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAAAAAAIBwa344AAABo0lEQVR4XmJYRSEYHgaMGjBqwKgBowaMGrACQgHqJHdciWEQimIp9FOE/Rhp3GMJ9r+Vx4V8iqf5GRtuDuBAEWGSSzAWz6VOq04S/dkdaf9q41KGEH7FegP0wu2fAOi+gwAwyv2MeAPwcQHsdtsDYBgT2K9+AOAYXUoHpXNaZ+XLPYnAlI6vHUPDj5He4SebzBN+h3w0wKWqUrhH16bhF4BHGHIgsVURVUUY5B9kUpSIiKG6VHJTOwkgvstHxRaVUqoNYKdMGap+Clxh4vlNv6Emx180HQfnmYrNJggb528Dy7EtYZrnFEcMQ2qPQ8JcQHLZU+OY1D3hKffqoiZgeTiEkq6Du5EVZsIp4lAUgYbOLwBz9FVR3PeIPhbIx4kyu2kGRhExvu7ZAcBLCH7nTuPeCw7LPvG8277mOZbRqLtzJgyyv8N8z94aAEAUZwGMK+RltAE9ysqdtdXP7JkU4AaLzpTeQ7kB6PGlYG3JjfELVorlo/2yUs0t8q5SSkshJiRP8S9gOwBItftOGEsdwt9rorQk8R/Qm6VEsnsvFXkB3d0fYbcRJrJy0BIAAAAASUVORK5CYII=" ;
      r_12_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAADFBMVEWAAAAAgAAAAICAQAD6AD8SAAABxklEQVR4XpSUwW3DMBAEr8nlgyVcPyohjzBFpArmkRJUQh52AGExogxRhvwR4F3Pncc4R3vzWt/kR8CH9JJ//hJSuQAsUm4fk9LBSlSozAGSqsdUAERUTgCsJ3lM8Vs//iqSksoMsEhSbm0WXYlUqMwAkqTqMRUAEZURgB8PVvEYO+tDlFR202E/KJA8RkgkqlR204EfAB6jHACLJwPAdNjPDKCepwBMB37ubYDpwA8SrwBIxHTgp+3puGevo0QqlAI4P/LVr0AFUQBQlWwHwHWiPAMwx0959V4ay1GZADi1+S1QAYBEjp1rBMA1UhklArArPyF2cU1UDgD8bPHzr13+I1HBdODnkH4/2gvg67kOFUxzCxOA1JUnAExzjbc34Brxcw+A6f9SyCUFQhgIohGZtSvPE48gYO6bI3kAoSaflgdKAsHadKCK16l2SWs4nElnnf4qY8oV9uLMikRuc3N49roAVGFFIoRaAOkJWGzzGOCXKxwDgEXq/4BIHzDLmAC8be4DpLwHwJorBABEAFCvLK4xbzMpYkUixmoClATAyunsAxCAUCpsAEwAqNdSbBgc6iuA+7w1haL97XBp6o1U4FDfAX/SsDR4txu33wAAAABJRU5ErkJggg==" ;

      r_20_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAGFBMVEUAAACAgADAwMCmyvCAQAAA4ID/AAD//wAUMLhVAAACy0lEQVR4XsXVwY6bMBSF4T8DdrfwBhHqA1iysrdSlG6RRuxZTN0XGIXXLzGBK7CbiYhKj7LKIv507rVD/VoufsxHvTGbAV7ykoHNx9Pp8PHdmI0CNjevu/ARgAj2AEgDuwIkcwNe6xmw5xJepgb8VIH2//sW7AUQQWeABrCA3usWSAEdBlQD1gDsvYRDsKAgMzBW4PcGZAFgeQggfw3A7QeA1Agyg5oKQCdnAJC/AjhzT54AYI1qLNAOSQIIeQVQHbkn/hcELK2BtgHlY4AT/FbA+RFAQWaVUW0D4G9J49kOqKoqPYOL9t2vFrKTba0NAO29XtirWZBvBVRD0hVcOq+78Aic3k1mDeFN9gJwb1Wk3wQQQb4egUe1YA1goxGAAET/9IZKizIE6r7vP6UB7UG17fuphcysGgC+qCCiOfI0QCr4ee2XDUDYwxYMfhDINQBIDFBCBADSABH0/vdnBDhlhraxdH4gTAAH8CaAqAIXARyQPwZ8u177fh4BOgCyE9bQZKYDWABIz4CQCCDMGFDdAUMDPczXsAsABdYojNdDngCQBjhxJgDHO+B6WwKmEQSAVYBRWA/o+iFAaIcIINAkQBoI2yqAzIyA1TWEAZEEjOeX5Qrg1iJ5TELugPsOMB5nb2EENGgvgPE4twLIQUVZUESAWOCYBNE7MF+CALAsANNp5xgwnX9YASAlcEwCgSUB2QIgczwnAUVRIiOQAhCsAJiWQFiygzEgetAEIAcVh6IsiwcAxCSA+kkApF8cAVCGLADHCOAIfU0z+F7/FdBCNu+A1BchJCWHkkUD54r1DFisYS0RwAcAqoGM/P5V/UUACgbAYQU4rgBunuMN8D0JCA2pFvgRUElAuoz1EsptmVRE9hSgdigQlAAeBAkCWFXg8ucAkucBtUsCqiUgcseCj4RKNM8T5id/uQT/OC4BOO4FEEEMENVugj9m0CyMRLeKpQAAAABJRU5ErkJggg==" ;

      r_21_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAElBMVEUAAACAAADAwMCAQACAgID//wAHZQqUAAABXElEQVR4Xu3XUYrCMBCH8XHqAeoNhskFQv/su4A3EO9/ldV0I10nODXZFBb6PRWw8HMITUKXHOucsHZLOD9ccgbQUyCsDqCvQFgdQF+BsK4FqFCHWN8Czr+w2iHWRcdVgB2wA3ZAALQ5YKoGIL3cVgCwCsAWEHC7QhvD1w2TBcgaAO6A1hGEBwB1gJAA0KaQAFMVAAnQNoIwA1ABSMO79xwBFWNvALd7V0wVAGTANJsQB7w2gLwBzAD8BQAlQOwJSGsgA3QAGUBEZAeQ1kAVIGSAPgE2ZwKaAf4aOKsHEAwwDbUAPf4/gFIBEKkbwH6ICLbIFR+iWoBQoS0BdLKNGwJkLAAOGwIOBcB46gWw27FQoUMGeNuxD2AXcCrUAJD3gB1AjxIg0k9lADkNCZAePwGwPZSWJzB+cCgVH2CvBXAA7ANgLgY+gBcv6zsAqdviT4gPKPywfiewcQHwDSXB7I2tcgFNAAAAAElFTkSuQmCC" ;
      r_22_0 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAAB7PwDAwMAAxrgrAAAA+UlEQVR4Xu3SsWrDQAzH4XTt7pfIU3T2GCxDtDsQvUeW7ieop3rQEf2fsjiN20B74LujpIX+5uND6LRBqqnDGZeaLZ6R6meB182lDCBAXYwG4jgDE72XA/TOcAPCDJzyAemNYQYcpBhQqMHjWATosY+K0a47aPKBvWoEG1AOBHK5AmfKB4Ky1QI+oAJQFR+WQ5oWoC075XrgtAC7ewHNAnR/CLDeyUWJ1GXq6KPtWkDN/CjqUgqMFrFfAPqsXQsotA4wVrzMQKAyAGEGvk6wWw1YJcAewd8AXc43ClcA1oMQOA9IdQvQ492BNg0ke7gFntLvqLLfAPwDb1rKUt3zn4kDAAAAAElFTkSuQmCC" ;

      r_sell_farm : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAHlBMVEUAAACAAAAAgACAgAAAAIDggED/AAAA/wD//wD///8rPsvaAAAEbklEQVR4XrzUsW7bMBAG4APMyM5bBIQfIICzdCPYS+KxQzN0y2AY6KbBANHNg4brFqBoE75t785n04TMRu3QH5A0OND/8cgI8Cx+6fF/B3ApxcgPBSwnAYL7O0BAjMsGQNq9PyImAaJn9yhE2I5D3wREXjcjolcATgIsxyNYEw1tAMQ2AL2P3gsgTgSg9340AuK0/zxwQxPAuKgAfU5K9DeID9t6AM0RRO9vmnsLIrTF+0lHQJo3GPi+3U4AmNdhE6AjEEAUwpRsOUHvmxpAbTT88QcFxNjegSfO5zIAqe7eAaSUdljSXzgzgwE+rlYr9Bj5Ue1Aef/9k8UAJQXwPb/lPKDlMdWAR9MUbw2w3JU14vmIrV7HUAD1CPbXb1AASXMOSBWANBVAY4BSYAMokV/bAKr6064FoEOGBuChKtABfMk/9TLA1/xLrnMAaUq/pnEi6JgT4EP+scr5CNjWgHsBvFzJdQK8dHqNAbbcnNO3/KqlY8CaKGfiQ0ODApABL7NVBgHYAHLWZf4zAHLqr191BEaqAZCJ94yoDQBtUQD3v38G1meANAKkCkAjwCl3UwBdATyPAbrckl39T2nWkqEB4HdLzyVAOAG6AggLAnldA5Azn4h3ALcVgANycwy4eqq+A8HqARjgrB9oDwsiVwPgCIDcX18AAC0UcKuAGV/OABoDhDPAJwaATR86BWpgTcCAoQbA3OaeLgOYDCgAEADM5CYCfrN1HABWDnClAMdALj84QAHB0V4AoZz5fi79sKs/S0WwX0g/7RUwK2dACrsyYikI99YPPAFUwHMHptRKABQADQbAeeoBYM6MAuCgJRB7BTwGoAAerN4KQAFQAMirfzalVa71CKABguy+preB1CMAIqBDghOA0zPAJgWAAGyBmyCFsvlSfwSo0H6vvkJgBdjPLwD6ZD6H+4UB0P0unoxxGwZiIEg2cbsLw3G+kae48AP8A6tKG/88IkUejxAMF0GQraRb3u0cRQlJPa4j4INAJZU1gzfYuzfgaoL7nH3Th+ebZYIy77zYyj0m8n5Y3Bcyx/BBFRJ6tBE0kR2ADnC6hi5U319+A4BmQBJwANhIyBJ8g4AbAJkzEP64INkAyK38ffbzOA0aDz0XwFk8X+wbOEAiJ4DpuOV/MhQBcV4SXNLG242RX6dpmjT5ENwNAPY3OMDXIRtE+hB8DwD0fEIDNTbE/VMYRjXg0QCgaw8WGEA0wIg8TDd/pX6gALjGK0tKEDrScLoy7IpW6ASQfkdUUmMCVkEtevZBqfoZACKkiE6JMru+KNMnSNyO6ABnA7D8hcLuFwCEVM/bRwY1ykWsQqsYHZ/jStNPSez8BIjHfklkgD8kYLGIjFcI+m6PCQBmPrHzM1UkF1JKogeivAmbosIdvtcGQPwTdyWx9yXjyq02S0vEaEGCSVVqHwFs9fmqece9L9UTq+tCSyoetJpqTwltCTUxO1/4SlWGJNxTytNzyqzdzeQvBY9WPlW64BOAP1ZdHf8B8DrqBypffdRIfS2WAAAAAElFTkSuQmCC" ;

      r_wee_clink : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAgIDAwMAAXXgPAAAAyElEQVR4Xu3WMQoDIRAF0MFqSZ9+mdKjpAzJfSQQGDxF1krmlCk0/MYt/Cm2SKZywX18/IXKfTTR3R/+mf5Rh1v3gRoB1DgNIEJbMgAi1EgBnqRP8Eng1oJn71Pa4nwQUEW+BMyOSPBPcB0neJKACA/0YQGzrGpWVGngpMFSWWkg5VVtKYEGlhw02Uv1qDPgW7iME2yTAFogAbRAAmiBBvgzGLew/VILcdxCnQPQAg2gBRLA9U4CeGAQAH5rFAMUAJkCMoCyD7wBMsQsMHU9JoUAAAAASUVORK5CYII=" ;

      r_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAYAQMAAAAvTrFnAAAAA1BMVEX//wCKxvRFAAAAD0lEQVR4XmPAAKNgFIwCAAMYAAFrMpCEAAAAAElFTkSuQmCC" ;

   # scenery/individual items
      s_hist_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAADwAAAA8AgMAAABHkjHhAAAADFBMVEUAAAAAgAD/AAD///+CqD+SAAABPElEQVR4Xn3RMWqFQBAA0EC6NF5DbNP9Ip5ChDTeIxC2SPdPEYTAMv7gBQKG2Aas5N/BShAbcf9mnNmdrISfwZV57sDM4I3dh3Nvc7FRs0Kbwijyls7PxfYRzcVofDvP6jxnxdkUzqboTabyWTlbTDP8KP168whvKhebJwB4V+IFtqjFA2hIoBIDh/cFEpSGRlwN+AQ+HeLTYWcIvLj62vtIDUoxcISOQ2u6TsSYg/69H4CjuuatGo8YNl2t/zsP7y++AByhhGBfCrEtiUfr/aWRyYv4ju5fvdeErFPvhearvUdu0ETOkyXbzrnFDWKcvmWPEW1QY0KeUue1I9tbmrixn1y/3jt/p2ws4b/Ppol5WjH+39DrA3ykoS3Yve3OIzoKPKG7f9zyEXdcI47QY+CUeopXcsqW0kgcxA8Mw/mCEuR+vQAAAABJRU5ErkJggg==" ;
      s_maze_full : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAABRAQMAAAAHGerDAAAABlBMVEUAAAD///+l2Z/dAAABD0lEQVR4XsXWMY7EIAwF0L9KkZIb5CQz90KiyOReg5iTQG7gdC5G5K/IFrNaCbqVXaSIXvGNIxzwUwDg0Gr9vPwNVjIJi1LsgF80ypSPrx4Ip0YJJ2kIptf8dB7ohlyLxqtXQ+CX475fSbttMpGFSeyAX+YHpjw4SWoiM8n/BHEIAI07cMD1M9SfIHbAL4DzGI67tkcSO+Bx3PeQdetmoFZ5Z6UhmPJ8XUG37rgzo4SilXYgZNxcyLjvXcAkIWulJdCtgYfrg8i1KMUQvPQJAN1xh6KR71MrDUH7JttxDse9FlaxBMfNARjsbrY2WWkH2hWJazcOF+upVezA9NJNsMzbYC1S3mSiHUAr/+d/8hvvtjQLfUIXKgAAAABJRU5ErkJggg==" ;
      s_maze_n : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAApAQMAAADgaGVvAAAABlBMVEUAAAD///+l2Z/dAAAAqElEQVR4XsXUMQ7DIAwF0F8xZOQGnKS9l6UMae9V1J4EcgPYPFSJa9EhWWCr7NF6MjZGQI6AhocGliN5Bpp+FcksxQ5Q4FhcqpcemHcF8y5iCNx7enoCuk0umWOb1RBQqLe1ddodU14iWSvYAQrTHS4NblJYKySl/wRxCACOK1Dh+xW23zl2gALgCcN1b20hxQ4Q9E3OiR/dCsJb+SQWQ+DS1L6gqz+BL3qUpiQWbdjqAAAAAElFTkSuQmCC" ;
      s_maze_s : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAApAQMAAADgaGVvAAAABlBMVEUAAAD///+l2Z/dAAAApElEQVR4XsXTsQ2EMAwFUJ8oKNmASbi9kFLk2IsIJkluA9O5QM4/XEGTa+3CRfRkKfkx4a4u94m7fExDvA+fIGYkDkUUfiBkmoarvb9NgI1DFoUnkMXAZ2iDhFgE7Ah2WemqZtyhSMJZReEI7E/ac/6NOxYoOwLbGSJ6NUGFXRMKPzBTv9I8Hs3FiZZFrKLsB7pdFqaxX5oTIOAT2OAHyGq29gA/7gin8wjDu+EAAAAASUVORK5CYII=" ;
      s_maze_thru : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAABRAgMAAABAuZATAAAACVBMVEUAAAD/AAD///9nGWQeAAAB2ElEQVR4XuXXsarrMAwGYNGx73ELzfvIdCyZDn2KzN4DpVMxRPj+T3kr4fQsvYMlOB6OBkOWD9nI+THhY9FeQu+a8Kn+A0y2ZlQBin1WDAI25nlNsQ7mhziA5VAx5VKFjvNdiA69QEYDpny7C4CRAF82Zv7yA6hKdgJ0fBJN+UkyLaR16O0ABdoBZJ+IUcCaGsBOAGjAzTOJdCyV2nFeyTEHyIaV1kEM4K8ggDjQf4hkQ6gn6ZlEW1oHVdfbUECvsw8oMEDU6QPoVQrU73TxdNAiAaKb8QJnZk4hQKkBgE2iFs4L2d/RdZ2tg3Yr6gBAgzkECBAAFiIN5krnXCqmxZHOkAlzxV8DgJ8HmJMCG3uBG6CAwAfY+U35BWi6WFj3AbZ9KNDyreD3AXnWYL6SAtXShboBy2QDnB1sKQiIZL4EAdxDwGk57MBC5AFyecjeffUBawoCwDjgSi/gSa36r3OeYR3skVDw88CagsADQeBOJxvCPVioG4C8uwdU6QW2FAQEwwGbP9JyvJ3twfueA6CgH9hSCOALJASgxoCFiOw6fz8A+x+e7YcCG4YKF7CmIPCQUYANoQWLDqGdpOO9cALsQgC6OIA/zJctBQDbPgYB9C6bSavPwD9PHDwkbwJilAAAAABJRU5ErkJggg==" ;
   }
}
