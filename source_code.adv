start_at = "wee_clink"
start_theme = my_theme

game_information {
   game_name                    = Chez Dark Shade Ark
   game_version                 = 1.0.0
   game_shortname               = cdsa
   written_by                   = Andrew Schultz
   uuid                         = 9a53454f-9f3c-4af9-b93a-4a04c86c6c96
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of {wp} and {ut}
}


## Defines locations in the world

strings {
   # general strings
   a_num : string "<an umber, uhh, number<#f80>>" ;
   cdsa : string "<Chez Dark Shade Arc<#f80>>" ;
   gsgr : string "<Go-Strange-Ghost Range<#f80>>" ;
   ut : string "<Us Too<#f80>>[http://andrewschultz.itch.io/us-too]" ;
   wp : string "<Why Pout<#f80>>[http://andrewschultz.itch.io/us-too]" ;
   note_once : string "<ONE-TIME NOTE:<#f0f>> " ;

   my_score : string "{score}/{max_score}" ;

   # commanbds
   v_about : string "<ABOUT<#0f0>>" ;
   v_i : string "<I<#0f0>>" ;
   v_score : string "<SCORE<#0f0>>" ;
   v_verbs : string "<VERBS<#0f0>>" ;
   xme : string "<X ME<#0f0>>" ;
   xnum : string "<X NUMBER<#0f0>>" ;

   # location stuff
   wc_noback : string "You don't want to go back <IN<#f80>> to the wee clink." ;
   wc_nogo : dynamic_string {( point_walk_round ? "You can't go that way, but there are exits north, south, east and down." : "The wall, crowned is blocking you. You need to find a way through. There must be at least one, if you look enough." + " {wc_noback}" )} ;

   d_wall_crowned : dynamic_string {( "A wall, crowned. You don't want to go back into the wee clink, so you probably want to " + (point_walk_round ? "Go north, east, south or down, where you found exits in the wall." : "find exits in the wall somehow.") )} ;

   custom_unknown_verb_error : dynamic_string {( "Nothing special happens. You can use {v_verbs} for a general overview of standard verbs." )} ;
   exits_err : dynamic_string {(
      is_at "wee_clink" ? "You need to figure a puzzle to leave, and when you do, you'll automatically go out." :
      is_at "r01" ? "{wc_nogo}" :
      "You can't go that way. I should give more information."
   )} ;
}

integers {
   score : integer "0" ;
   max_score : integer "13" ;
}

booleans {
   # points
   point_weak_link : boolean "false" ;
   point_walk_round : boolean "false" ;
   showing_map : boolean "true" ;

   # flags for one time notes, etc.
   warn_generic_credit : boolean "false" ;
   warn_hints : boolean "false" ;
   warn_score_header : boolean "false" ;

   intro_shown_yet : boolean "false" ;
   ever_x_me : boolean "false" ;
   ever_x_number : boolean "false" ;
}

}

locations {
   wee_clink      : location "It sure is claustrophobic in here. You're not sure how to get out." header="<Wee Clink<#ff0>>" graphic="r_wee_clink" {
      on_command {
         : match "weak link" {
            : print "There you go." ;
            : set_true "point_weak_link" ;
            : gosub "add_point" ;
            : press_any_key ;
            : goto "r01" ;
            : redescribe ;
         }
         : match "weak _;_ link" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }
   r01 : location "{d_wall_crowned}" header = "<Wall, Crowned<#ff0>>" graphic="r_wall_crowned" {
         on_command {
         : match "walk round" {
            : print "Narrative text." ;
            : set_true "point_walk_round" ;
            : gosub "add_point" ;
            : press_any_key ;
            : done ;
         }
         : match "walk _;_ round" {
            : gosub "say_half" ;
            : done ;
         }
      }
   }
   r02 : location "r02 desc" header = "<r02<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r00 : location "r00 desc" header = "<r00<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r22 : location "r22 desc" header = "<r22<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r11 : location "r11 desc" header = "<r11<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r12 : location "r12 desc" header = "<r12<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r10 : location "r10 desc" header = "<r10<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r21 : location "r21 desc" header = "<r21<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
   r20 : location "r20 desc" header = "<r20<#ff0>>" graphic="r_blank" {
      on_command {
      }
   }
}

# Defines things in the world (scenery cannot be carried)

objects {
}
   
connections {

   ## Connects locations together (bidirectional)

   from, direction, to = [
      r01, enter, wee_clink
      r01, north, r02
      r01, south, r00
      r01, down, r22
      r01, east, r11
      r02, east, r12
      r00, east, r10
      r22, south, r21
      r11, down, r20
   ]

}

barriers {
   block_from_clink : block {
      location = r01
      block_when_not = point_weak_link
      message = You haven't found a way out yet.
   }
   block_to_clink : block {
      location = wee_clink
      block_when = point_weak_link
      message = You have no desire to go back.
   }
   block_wall_1 : block {
      location = r02
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
   block_wall_2 : block {
      location = r00
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
   block_wall_3 : block {
      location = r22
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
   block_wall_4 : block {
      location = r11
      block_when_not = point_walk_round
      message = {wc_nogo}
   }
} 

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {cdsa}?
   ask_quit                                       = Do you wish to quit {cdsa}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {cdsa}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
      }
   }
}

## Print the objective when the game starts

on_startup {
   : print "{cdsa}: EctoComp 2025 Petite Mort game" ;
   : press_any_key ;
   : clear_screen;
}

## Execute this every time a player moves or redescribes a location

on_describe {
   : if (!intro_shown_yet) {
      : print "{note_once}{cdsa} uses a reduced parser. {v_verbs} details them, though standard starting commands like {v_about} and {xme} may help you get started." ;
      : set_true "intro_shown_yet" ;
   }
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : match "about _" {
      : print "{cdsa} is a simplified-parser game that requires two-word commands to solve puzzles. Some puzzles rely on others. A few have alternate spellings. It should always say if you are half-right." ;
      : print "" ;
      : print "{cdsa} is a ten-room game. The main area is 3x3. Originally I wanted to make it symmetrical, but unfortunately the clearest way to do so would draw a hate symbol. You know which one. So if you want to map {cdsa} on your own, the left 2x3 are ground level, and the first room is center west." ;
      : print "" ;
      : print "For thanks, CREDITS." ;
      : print "For a more detailed history, HISTORY." ;
      : print "For verbs to use, VERBS." ;
   }
   : match "credits _;credit _" {
      : print "Thanks to the organizers of EctoComp past and present." ;
      : print "Thanks to Chris Ainsley for creating Adventuron." ;
      : print "Thanks to <mazegenerator.net<#0f0>>[http://www.mazegenerator.net] for generating the maze seen in some graphics." ;
      : print "Blanket thanks to Python and its developers for scripts that helped me generate similar code (point scoring, etc.) quickly." ;
      : if (!warn_generic_credit) {
         : print "{note_once}you can see generic Adventuron credits with <*CREDITS<#f80>>." ;
         : set_true "warn_generic_credit" ;
      }
   }
   : match "help _;hint _;hints _" {
      : if (!warn_hints) {
         : print "{note_once}there are no explicit in-game hints beyond the first point. {cdsa} comes with a walkthrough if you want spoilers. Also, there is a hint item you can find/have found with X ME." ;
         : set_true "warn_hints" ;
         : done ;
      }
      : print "" ;
      : print "You can {xme} for a hint device which is meant to be relatively intuitive." ;
      : print "{xnum} should give you a number. You may be able to guess what it means, but if not, I will give progressive hints." ;
      : print "If {xnum}'s number is 0 or -1, you are done here." ;
      : print "Most of the time, {xnum} gives a two-digit number. If it's blurry, that means nothing to do here yet. But you can still try to guess for future reference. If it's particularly" ;
      : print "If the number is not blurry, {xnum} will not spoil any letters. However ..." ;
      : print "{xnum} will give, in order, the number of letters in each word (tens digit = first, ones = second.)" ;
   }
   : match "history _" {
      : print "{cdsa} came about after {gsgr}, when I just said, what would happen if I had an EctoComp entry with the leftovers from brainstorming {ut} and {wp}? Obviously some ideas were more amusingly spooky than others, and some words suggested themselves." ;
      : print "" ;
      : print "So {gsgr} formed, and I focused on features. During the stretch run for {ut} in late August, I had a flurry of ideas while procrastinating bug fixes and transcript reading. One of the transcripts was to blame, so to speak: two testers noticed an unintentional red herring in the Cell, Urban ... which might have been a better puzzle than the cell itself, though the cell had a better \"after\" room name. So that was my starting puzzle. Then soon after I saw something indicating the final puzzle. I had to go through with it!" ;
      : print "" ;
      : print "{cdsa} has more rooms than {gsgr} so it doesn't have bells and whistles, but I may add them post-comp. No way was I fitting everything in under four hours." ;
      : print "" ;
      : print "So, late August 2025, then the second half of September 2025." ;
   }
   : match "score _" {
      : print "You've currently scored {score} of {max_score} total points. There are no bonus points." ;
      : if (!warn_score_header) {
         : print "{note_once}This is tracked in the upper left." ;
         : set_true "warn_score_header" ;
      }
   }
   : match "verbs _;verb _" {
      : print "{cdsa} uses the four compass directions, along with <UP<#0f0>> and <DOWN<#0f0>> and <IN<#0f0>> and <OUT<#0f0>>. There is no need for TAKE or DROP, but {v_i} and {v_score} chart your inventory and progress." ;
      : print "Meta-verbs include {v_about}, {v_credits}, and {v_verbs}." ;
      : print "All point-scoring commands have two words which you need to figure." ;
      : print "TSTART/TSTOP start and stop a transcript." ;
   }
   : match "x me;x myself" {
      : if (!ever_x_me) {
         : print "Weird! You see {a_num} on your arm." ;
         : set_true "ever_x_me" ;
         : done ;
      }
      : print "There's {a_num} on your arm, which may or may not help you." ;
   }
   : match "x number;x umber" {
      : set_true "ever_x_me" ;
      : if (!ever_x_number) {
         : print "You don't remember getting a tattoo. But it's weird ... it swirls around a bit." ;
         : set_true "ever_x_number" ;
      } : else {
         : print "You watch the number swirl around a bit more." ;
      }
   }
}

on_render {
   : if (showing_map) {
      : if (is_at "r01" && point_walk_round) {
         : overlay "o_wall_crowned" x="0" y="16" ;
      }
   }
}

assets {
   graphics {
   # overlays
      o_wall_crowned : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAYAQMAAAAvTrFnAAAABlBMVEX///+AgIBizNOVAAAAAXRSTlMAQObYZgAAACtJREFUKFNjYBgigP0BfppB/gd+msH+D36asIL6f/hpKij4/x8/PaqAPgoAytGDTRmnj0oAAAAASUVORK5CYII=" ;

   # rooms
      r_wall_crowned : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAAACAgAD/AAD//wAAAP8SxTJ0AAAAr0lEQVR4XsyTsQ3AMAgEs8IJFkFMgJT9Z0qRBkP9Slz+PdLJNtd9HhiBmk+B8hFI+Rbw8joTKd8CeHEmAv61wJ+foPyG8U+EfAsAFkDPdHwLFJAJdEUd3wLYW4iuKORbIAMLLHtBy/cNWAxDBf+tQEVmWKZ5C7V8ryGMNVHzazTWvJo/7dSxCQBADMSw8KN4/yF/jGt0kF6k8M3Xq+UB3Hy1/QGADgDoAIAOAOgAwAc4WsdzbGzXvgAAAABJRU5ErkJggg==" ;

      r_wee_clink : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAgIDAwMAAXXgPAAAAyElEQVR4Xu3WMQoDIRAF0MFqSZ9+mdKjpAzJfSQQGDxF1krmlCk0/MYt/Cm2SKZywX18/IXKfTTR3R/+mf5Rh1v3gRoB1DgNIEJbMgAi1EgBnqRP8Eng1oJn71Pa4nwQUEW+BMyOSPBPcB0neJKACA/0YQGzrGpWVGngpMFSWWkg5VVtKYEGlhw02Uv1qDPgW7iME2yTAFogAbRAAmiBBvgzGLew/VILcdxCnQPQAg2gBRLA9U4CeGAQAH5rFAMUAJkCMoCyD7wBMsQsMHU9JoUAAAAASUVORK5CYII=" ;

      r_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAYAQMAAAAvTrFnAAAAA1BMVEX//wCKxvRFAAAAD0lEQVR4XmPAAKNgFIwCAAMYAAFrMpCEAAAAAElFTkSuQmCC" ;
   }
}
